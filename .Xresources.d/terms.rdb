!
! WARNING!  This file should be used with my custom xrdb-cpp preprocessor,
! via:
!        xrdb -cpp xrdb-cpp
! 
! It should also be included via "all.rdb", which first loads
! "defines.rdb".
!

!------------------------------------------------------------
!
! Appearance

! {{{ foreground/background

#ifdef BLACK_BG_XTERMS

#define TERM_FG rgb:bb/bb/bb
#define TERM_BG black

#define TERM_BD white
#define TERM_UL rgb:e0/e0/33
#define TERM_IT rgb:e0/00/33

#define MENU_FG white
#define MENU_BG black

#else

#define TERM_FG black
#define TERM_BG rgb:ee/ee/ee

#define TERM_BD black
#define TERM_UL blue
#define TERM_IT red

#define MENU_FG black
#define MENU_BG rgb:ee/ee/ee

#endif

XTerm*background:   TERM_BG
xterm*background:   TERM_BG
nxterm*background:  TERM_BG

! Pretty non-fake transparency.  urxvt(1) man page says:
! 
!   [Please note that many X servers (and libXft) are buggy with respect
!   to "-depth 32" and/or alpha channels, and will cause all sorts of
!   graphical corruption. This is harmless, but we canâ€™t do anything about
!   this, so watch out]
URxvt*background:   rgba:0000/0000/0000/dddd
! Slows down redraw for me when switching workspaces (except for
! sticky windows) so disable by default and override on CLI for
! watchlogs windows.
!URxvt*depth:        32

XTerm*foreground:   TERM_FG
xterm*foreground:   TERM_FG
nxterm*foreground:  TERM_FG
Rxvt*foreground:    TERM_FG

! SimpleMenu is the type for all 3 menus (mainMenu, vtMenu, fontMenu)
xterm*SimpleMenu*background:  MENU_BG
nxterm*SimpleMenu*background: MENU_BG
xterm*SimpleMenu*foreground:  MENU_FG
nxterm*SimpleMenu*foreground: MENU_FG

! }}}
! {{{ bold/underline/italic colours

! Use color or bold/underline for bold/underline?
*xterm*colorBDMode: on
*xterm*colorULMode: on

xterm*boldMode: false

*VT100*colorBD: TERM_BD
*VT100*colorUL: TERM_UL

XTerm*colorBD:  TERM_BD
XTerm*colorUL:  TERM_UL

Rxvt*colorBD:   TERM_BD
Rxvt*colorUL:   TERM_UL
URxvt*colorIT:  TERM_IT

/* Hrm, don't understand this one yet. */
URxvt*italicULMode: false

! }}}
! {{{ other colours

! N.B. updates here could be reflected in ~/.Eterm/themes/base.cfg
! if I gave a shit about Eterm.

! Some nice themes at:
! http://tuxtraining.com/2009/06/27/terminal-color-schemes-for-xdefaults-or-xresources-file

! theme 2 from above link
! #define BACKGROUND rgb:00/00/00
! #define FOREGROUND rgb:7f/7f/7f
! #define COLOR0     rgb:00/00/00
! #define COLOR1     rgb:9e/18/28
! #define COLOR2     rgb:ae/ce/92
! #define COLOR3     rgb:96/8a/38
! #define COLOR4     rgb:41/41/71
! #define COLOR5     rgb:96/3c/59
! #define COLOR6     rgb:41/81/79
! #define COLOR7     rgb:be/be/be
! #define COLOR8     rgb:66/66/66
! #define COLOR9     rgb:cf/61/71
! #define COLOR10    rgb:c5/f7/79
! #define COLOR11    rgb:ff/f7/96
! #define COLOR12    rgb:41/86/be
! #define COLOR13    rgb:cf/9e/be
! #define COLOR14    rgb:71/be/be
! #define COLOR15    rgb:ff/ff/ff

! theme 4 from above link
! #define BACKGROUND rgb:00/00/00
! #define FOREGROUND rgb:ff/ff/ff
! #define COLOR0     rgb:00/00/00
! #define COLOR1     rgb:d3/62/65
! #define COLOR2     rgb:ae/ce/91
! #define COLOR3     rgb:e7/e1/8c
! #define COLOR4     rgb:7a/7a/b0
! #define COLOR5     rgb:96/3c/59
! #define COLOR6     rgb:41/81/79
! #define COLOR7     rgb:be/be/be
! #define COLOR8     rgb:66/66/66
! #define COLOR9     rgb:ef/81/71
! #define COLOR10    rgb:e5/f7/79
! #define COLOR11    rgb:ff/f7/96
! #define COLOR12    rgb:41/86/be
! #define COLOR13    rgb:ef/9e/be
! #define COLOR14    rgb:71/be/be
! #define COLOR15    rgb:ff/ff/ff
                   
! theme 8 from above link
#define BACKGROUND rgb:10/10/10
#define FOREGROUND rgb:d3/d3/d3
#define COLOR0     rgb:10/10/10
#define COLOR1     rgb:cd/5c/5c
#define COLOR2     rgb:2e/8b/57
#define COLOR3     rgb:f0/e6/8c
#define COLOR4     rgb:b0/c4/de
#define COLOR5     rgb:ba/55/d3
#define COLOR6     rgb:46/82/b4
#define COLOR7     rgb:d3/d3/d3
#define COLOR8     rgb:4d/4d/4d
#define COLOR9     rgb:ff/6a/6a
#define COLOR10    rgb:8f/bc/8f
#define COLOR11    rgb:ff/fa/cd
#define COLOR12    rgb:1e/90/ff
#define COLOR13    rgb:db/70/93
#define COLOR14    rgb:5f/9e/a0
#define COLOR15    rgb:ff/ff/ff

! my theme
! #define COLOR0 rgb:00/00/00
! #define COLOR1 rgb:aa/00/00
! #define COLOR2 rgb:00/88/00
! #define COLOR3 rgb:aa/55/22
! #define COLOR4 rgb:10/00/b6
! #define COLOR5 rgb:aa/00/aa
! !#define COLOR6 rgb:00/aa/aa
! #define COLOR6 rgb:79/ae/a6
! #define COLOR7 rgb:e0/e0/e0
! #define COLOR8 rgb:55/55/55
! #define COLOR9 rgb:ff/44/44
! !#define COLOR10 rgb:44/ff/44
! #define COLOR10 rgb:9e/db/96
! !#define COLOR11 rgb:ff/ff/44
! #define COLOR11 rgb:f7/ff/a6
! !#define COLOR12 rgb:44/44/ff
! #define COLOR12 rgb:51/55/c8
! #define COLOR13 rgb:ff/44/ff
! !#define COLOR14 rgb:44/ff/ff
! #define COLOR14 rgb:be/eb/f4
! #define COLOR15 rgb:ff/ff/ff

XTerm*color0:  COLOR0
XTerm*color1:  COLOR1
XTerm*color2:  COLOR2
XTerm*color3:  COLOR3
XTerm*color4:  COLOR4
XTerm*color5:  COLOR5
XTerm*color6:  COLOR6
XTerm*color7:  COLOR7
XTerm*color8:  COLOR8
XTerm*color9:  COLOR9
XTerm*color10: COLOR10
XTerm*color11: COLOR11
XTerm*color12: COLOR12
XTerm*color13: COLOR13
XTerm*color14: COLOR14
XTerm*color15: COLOR15

Rxvt*color0:  COLOR0
Rxvt*color1:  COLOR1
Rxvt*color2:  COLOR2
Rxvt*color3:  COLOR3
Rxvt*color4:  COLOR4
Rxvt*color5:  COLOR5
Rxvt*color6:  COLOR6
Rxvt*color7:  COLOR7
Rxvt*color8:  COLOR8
Rxvt*color9:  COLOR9
Rxvt*color10: COLOR10
Rxvt*color11: COLOR11
Rxvt*color12: COLOR12
Rxvt*color13: COLOR13
Rxvt*color14: COLOR14
Rxvt*color15: COLOR15

! }}}
! {{{ fonts

! xrdb-cpp needs to be in the $PATH, then
!        xrdb -cpp xrdb-cpp
! will substitute two @ signs for newlines.

#define FontAndLabel(fontNum,fontName,label) \
xterm*VT100*font##fontNum:           fontName@@\
xterm*fontMenu*font##fontNum*Label:  label (fontName)@@\
nxterm*VT100*font##fontNum:          fontName@@\
nxterm*fontMenu*font##fontNum*Label: label (fontName)

#if WIDTH >= 1400
*SimpleMenu*font: *helvetica*r*normal*12*

! Note: the default font is automatically inserted into the order
! according to its size.  That means we effectively have 7 font slots
! to play around with.

#define DEFAULTFONT 9x15

xterm*font:  DEFAULTFONT
nxterm*font: DEFAULTFONT
Rxvt*font:   DEFAULTFONT

FontAndLabel(  1, nil2 ,      Unreadable)
!F!ontAndLabel(?, 5x7  ,      Micro)
!F!ontAndLabel(?, 5x8  ,      5x8)
!F!ontAndLabel(?, 6x10 ,      6x10)
FontAndLabel(  2, nexus,      nexus)
FontAndLabel(  3, smoothansi, smoothansi)
!F!ontAndLabel(?, kates,      kates)
!F!ontAndLabel(?, fixed,      fixed)
!F!ontAndLabel(?, 9x15,       9x15)   <--- default
FontAndLabel  (4, fkp,        fkp)
FontAndLabel  (5, 10x20,      10x20)
!F!ontAndLabel(?, vga11x19,   vga11x19)
FontAndLabel  (6, 12x24,      12x24)

#else

*SimpleMenu*font: *helvetica*r*normal*10*

#define DEFAULTFONT smoothansi
xterm*font:  DEFAULTFONT
nxterm*font: DEFAULTFONT
Rxvt*font:   DEFAULTFONT

FontAndLabel(  1, nil2 ,      Unreadable)
FontAndLabel(  2, 5x7  ,      Micro)
!F!ontAndLabel(?, 5x8  ,      5x8)
!F!ontAndLabel(?, 6x10 ,      6x10)
FontAndLabel(  3, nexus,      nexus)
!F!ontAndLabel(4, smoothansi, smoothansi)  <--- default
!F!ontAndLabel(?, kates,      kates)
!F!ontAndLabel(?, fixed,      fixed)
FontAndLabel(  4, 9x15,       9x15)
FontAndLabel  (5, fkp,        fkp)
FontAndLabel  (6, 10x20,      10x20)
!F!ontAndLabel(?, vga11x19,   vga11x19)
!F!ontAndLabel(?, 12x24,      12x24)

#endif

! urxvt does not like fkp for some reason
!URxvt.font-switcher-list:  Micro|nexus|smoothansi|9x15|10x20|12x24

URxvt.font-switcher-list: xft:DejaVu Sans Mono:pixelsize=6  | \\
    5x7                               | \\
    nexus                             | \\
    smoothansi                        | \\
    xft:DejaVu Sans Mono:pixelsize=11 | \\
    8x13                              | \\
    xft:DejaVu Sans Mono:pixelsize=12 | \\
    xft:DejaVu Sans Mono:pixelsize=13 | \\
    9x15                              | \\
    xft:DejaVu Sans Mono:pixelsize=14 | \\
    xft:DejaVu Sans Mono:pixelsize=15 | \\
    xft:DejaVu Sans Mono:pixelsize=16 | \\
    10x20                             | \\
    xft:DejaVu Sans Mono:pixelsize=17 | \\
    xft:DejaVu Sans Mono:pixelsize=18 | \\
    12x24

!URxvt.font-switcher-list:  5x8|6x10|7x13|8x13|9x15|10x20

URxvt.intensityStyles: true
!URxvt.boldFont: DEFAULTFONT

! }}}
! {{{ cursor

!#define CURSORCOLOR blue
#define CURSORCOLOR coral

XTerm*cursorColor:  CURSORCOLOR
nxterm*cursorColor: CURSORCOLOR
Rxvt*cursorColor: CURSORCOLOR

XTerm*cursorBlink:  true
nxterm*cursorBlink: true
Rxvt*cursorBlink: true

! }}}
! {{{ pointer shape?

nxterm*Cursor: xterm

! }}}
! {{{ geometry

/*
  Could ifdef on WIDTH here
  This is really weird: if I use this:
    xterm.vt100.geometry: 92x40
  I can't override on the CLI via xterm -geometry
  but if I use this, I can:
*/
xterm*geometry: 92x40
Rxvt*geometry: 92x40

! }}}
! {{{ title bar

xterm*titleBar:     false
nxterm*titleBar:    false

! }}}

!------------------------------------------------------------
!
! Behaviour

! {{{ scrolling

XTerm*saveLines:    1500
nxterm*saveLines:   1500
Rxvt*saveLines:     1500

XTerm*scrollBar:    false
nxterm*scrollBar:   false
Rxvt*scrollBar:     false
xterm*rightScrollBar: true
Rxvt*rightScrollBar: true
!rxvt*scrollBar_right: true

*scrollTtyOutput:   False
*scrollKey:     True
Scrollbar.JumpCursor:   True

xterm*VT100.JumpScroll:  true
nxterm*VT100.JumpScroll: true
XTerm.VT100.JumpScroll: true

! }}}
! {{{ key and mouse translations

/*
  Good reference here:
    http://www.in-ulm.de/~mascheck/X11/xterm/XTerm
  
  From
  http://moat.nlanr.net/Software/OC3mon/DOSCoraldist19980317/REMCTL/XDEFAULT.UNX
  :-
 
    in case you are wondering, magic words like 
    "Prior" and "BackSpace" are all listed in 
    	/usr/local/X11R6/include/X11/keysymdef.h
    with "XK_" in front of the name you can use here
 
    boy, is it frustrating to try guessing them!
 
    apparently, tilde in front of a shift means "not this shift"
    and exclamation point in front of a shift means "just this shift"
 
    but the ~Shift somehow doesn't work on IRIX 6.3 X display
    in front of the lines that define ctrl-alt-L and ctrl-alt-X,
    even though it works fine for ctrl-alt-delete, so you need
    to take "~Shift" off the front of those definitions (which means
    that shift-ctrl-alt-L will have the same definition as ctrl-alt-L)
    if you live in that world
 
  In rxvt, Ctrl-Shift-Prior/Next is a bug which needs to be patched:
 
  http://lists.debian.org/debian-qa-packages/2005/10/msg00112.html
  http://bugs.donarmstrong.com/cgi-bin/bugreport.cgi?bug=226386
  TODO: Check http://sourceforge.net/projects/rxvt
*/

#define XTERM_DEFAULT_TRANSLATIONS \n\
               None <Key> BackSpace:     string(0x7F)\n\
 !Meta              <Key> BackSpace:     string(0x1b) string(0x7F)\n\
               None <Key> Delete:        string(0x04)\n\
               None <Key> Home:          string(0x1b) string("[1~")\n\
               None <Key> End:           string(0x1b) string("[4~")\n\
\
               None <Key> Prior:         string(0x1b) string("[5~")\n\
               None <Key> Next:          string(0x1b) string("[6~")\n\
             !Shift <Key> Prior:         scroll-back(1,halfpage)\n\
             !Shift <Key> Next:          scroll-forw(1,halfpage)\n\
       !Ctrl        <Key> Prior:         string(0x1b) string("[5\^")\n\
       !Ctrl        <Key> Next:          string(0x1b) string("[6\^")\n\
        Ctrl  Shift <Key> Prior:         string(0x1b) string("[5@")\n\
        Ctrl  Shift <Key> Next:          string(0x1b) string("[6@")\n\
  Meta  Ctrl        <Key> Prior:         string(0x1b) string("[5@")\n\
  Meta  Ctrl        <Key> Next:          string(0x1b) string("[6@")\n\
 !Meta              <Key> Prior:         string(0x1b) string("[5@")\n\
 !Meta              <Key> Next:          string(0x1b) string("[6@")\n\
\
                           !Ctrl <Btn1Down>:popup-menu(mainMenu) \n\
                      !Lock Ctrl <Btn1Down>:popup-menu(mainMenu) \n\
            !Lock Ctrl @Num_Lock <Btn1Down>:popup-menu(mainMenu) \n\
                ! @Num_Lock Ctrl <Btn1Down>:popup-menu(mainMenu) \n\
                           ~Meta <Btn1Down>:select-start() \n\
                         ~Meta <Btn1Motion>:select-extend() \n\
\
                           !Ctrl <Btn2Down>:popup-menu(vtMenu) \n\
                      !Lock Ctrl <Btn2Down>:popup-menu(vtMenu) \n\
            !Lock Ctrl @Num_Lock <Btn2Down>:popup-menu(vtMenu) \n\
                ! @Num_Lock Ctrl <Btn2Down>:popup-menu(vtMenu) \n\
                     ~Ctrl ~Meta <Btn2Down>:ignore() \n\
                            Meta <Btn2Down>:clear-saved-lines() \n\
                       ~Ctrl ~Meta <Btn2Up>:insert-selection(PRIMARY, CUT_BUFFER0) \n\
\
                           !Ctrl <Btn3Down>:popup-menu(fontMenu) \n\
                      !Lock Ctrl <Btn3Down>:popup-menu(fontMenu) \n\
            !Lock Ctrl @Num_Lock <Btn3Down>:popup-menu(fontMenu) \n\
                ! @Num_Lock Ctrl <Btn3Down>:popup-menu(fontMenu) \n\
\
                    <Btn4Down>,<Btn4Up>: scroll-back(1,halfpage)\n\
             !Shift <Btn4Down>,<Btn4Up>: scroll-back(1,line)\n\
       !Ctrl        <Btn4Down>,<Btn4Up>: scroll-back(1,page)\n\
                    <Btn5Down>,<Btn5Up>: scroll-forw(1,halfpage)\n\
             !Shift <Btn5Down>,<Btn5Up>: scroll-forw(1,line)\n\
       !Ctrl        <Btn5Down>,<Btn5Up>: scroll-forw(1,page)\n\
\
  Meta  Ctrl        <Key><:              smaller-vt-font()\n\
  Meta  Ctrl        <Key>>:              larger-vt-font()\n\
       !Ctrl        <Key>;:              string(0x03) string("E;")\n\
/* \
  Meta  Ctrl        <Key>/:         dabbrev-expand()
/* Note dabbrev-expand needs ./configure --dabbrev-expand and
   even that doesn't work on FC4 ... */

/*  Unknown event type :   Btn6Down :-(
                     <Btn6Down>,<Btn6Up>: string(0x1b) string("[1;2C")\n\
                     <Btn7Down>,<Btn7Up>: string(0x1b) string("[1;2D")\n\
*/

XTerm.vt100.translations: #override XTERM_DEFAULT_TRANSLATIONS
xterm.vt100.translations: #override XTERM_DEFAULT_TRANSLATIONS

/*
  In the scrollbar we map buttons 5 & 4 to 1 and 2 otherwise, core
  dump.  This will move proportionally to cursor position, but we
  don't know how to program the same exact behavior as in the text
  widget.
 */
XTerm.vt100.Scrollbar.translations: #override\n\
     <Btn5Down>: StartScroll(Forward)\n\
     <Btn4Down>: StartScroll(Backward)\n\

xterm*ttyModes: erase ^?

URxvt.keysym.M-C-comma: perl:font-switcher:previous
URxvt.keysym.M-C-period: perl:font-switcher:next

/* This doesn't work :-( */
URxvt*iso14755_52: false

! }}}
! {{{ meta key

*eightBitInput: false
*EightBitInput: false
remotexterm*eightBitInput:  false
XTerm.VT100.EightBitInput:      false

! }}}

! {{{ bell

xterm*visualBell:   true
nxterm*visualBell:  true
!XTerm*visualBell:       true

! one of these will raise windows on bell but not deiconify - see
! http://bugzilla.icculus.org/show_bug.cgi?id=3241
XTerm.vt100.popOnBell:   true
XTerm*PopOnBell:   true

! }}}
! {{{ terminal type

! Let the distribution set the right thing, and with luck
! we will sometimes get 88 colors.
!
! xterm*termName:          xterm-color
! nxterm*termName:         xterm-color
! URxvt*termName:          xterm-color

! }}}

! {{{ selection

! Gotta have this one to trim trailing whitespace.
xterm*trimSelection: true

! Include newlines when selection includes end of line
! (e.g. via triple-click).
xterm*cutNewline: true

// Don't select entire line from beginning when triple-clicking.
xterm*cutToBeginningOfLine: false

/*
  From: http://www.leidinger.net/X/xresources/app-defaults/XTerm_mascheck

  Which characters are considered to build a _single_ word for Cut&Paste?
  Every ascii-value gets mapped to another (arbitrary), already 'valid'
  character  with a colon.
  Here ascii 48 ("0") is the reference. See the manpage.
 
  I don't want these to separate 'words':   ! # $ % + - . / @ ~
*/
XTerm.VT100.charClass: 33:48,35-37:48,43:48,45-47:48,58:48,64:48,126:48

/*
  Reminder:
    !    "    #    $    %    &    '    (    )    *    +    ,    -    .    / 
    33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
    @         [    \    ]    ^    _    `    {    |    }    ~  
    64,       91,  92,  93,  94,  48,  96,  123, 124, 125, 126,

  Wether this works also with _wrapped_ selections, depends on
   - the terminal emulator:  Neither MIT X11R5/6 nor Suns openwin xterm
     know about that.  Use the 'xfree xterm' or 'rxvt'.  Both compile on
     all major platforms.
   - It only works if xterm is wrapping the line itself (if so is not
     always really obvious for the user).
   - Among the different vi's, vim actually supports this with a
     clever and hackish trick (see screen.c):
 
     But first: vim inspects the _name_ of the value of TERM.
     This must be similar to 'xterm' (like xterm-color).
     The terminfo entry _itself_ doesn't matter here
     (e.g.: 'xterm' and 'vs100' are the same entry, but with
      the latter it doesn't work).
 
     If vim has to wrap a word, it appends a space at the first part,
     this space will be wrapped by xterm.  vim in turn then positions
     the cursor again at the _beginning_ of this next line. Thus, the
     space is not visible. xterm now believes that the two lines are
     actually a single one--as xterm _did_ some wrapping...

  Here comes a simple test for a                                   'wrapped_selection' (using an 80 chars wide terminal).
  Double click shall select the _whole_ word.
*/

/*
 N.B. ZDOTDIR will probably expand to the wrong thing when
      urxvt is run on a non-local display.
*/
URxvt.perl-lib: ZDOTDIR/lib/urxvt/perl
URxvt.perl-ext-common: default,selection-autotransform,font-switcher

/* Irrelevant since we're using the Perl selection code */
URxvt.tripleclickwords: true

! }}}
! {{{ AutoWrap

xterm*VT100.AutoWrap:    true
nxterm*VT100.AutoWrap:   true
XTerm.VT100.AutoWrap:   true

! }}}
! {{{ reverseWrap

! what is this?
xterm*reverseWrap:  true
nxterm*reverseWrap: true
XTerm.VT100.ReverseWrap:        true

! }}}

! {{{ locale stuff

! *numeric:           C
! *displayLang:       C
! *basicLocale:       C
! *timeFormat:        C
! *inputLang:         C

! }}}

