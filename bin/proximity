#!/bin/bash

me=`basename $0`

# From http://www.novell.com/coolsolutions/feature/18684.html
# Originally from http://gentoo-wiki.com/Talk:TIP_Bluetooth_Proximity_Monitor

# You'll need to use the MAC address of your phone here
DEVICE="$K610"

if [ -z "$DEVICE" ]; then
    echo "Device not in environment; aborting." >&2
    exit 1
fi

# How often to check the distance between phone and computer in seconds
CHECK_INTERVAL=2

# The RSSI threshold at which a phone is considered far or near.
# It's always(?) negative, so closer to 0 means closer to the phone.
THRESHOLD=-25

# How many consecutive times the threshold has to be crossed for it to
# take effect.
CONSECUTIVE=3

START_CMD='/usr/bin/xscreensaver -nosplash'

# The command to run when your phone gets too far away
#FAR_CMD='/opt/gnome/bin/gnome-screensaver-command --activate'
FAR_CMD='xscreensaver-command -lock'

# The command to run when your phone is close again
#NEAR_CMD='/opt/gnome/bin/gnome-screensaver-command --poke'
#NEAR_CMD='xscreensaver-command -unlock'
NEAR_CMD='killall xscreensaver'

HCITOOL="/usr/bin/hcitool"

# If set, this will consume battery from the frequent writes to disk!
DEBUG=

# catch non-syslog stuff
LOG="$HOME/.btproximity.log"
exec >"$LOG" 2>&1

connected=0

function msg {
    #echo "$1" >> "$LOG"
    logger -p auth.info -t "$me[$$]" "$*"
}

function debug {
    #echo "$1" >> "$LOG"
    #logger -p auth.debug "$me[$$]: $*"
    :
}

function check_connection {
    connected=0
    found=0

    for s in `$HCITOOL con`; do
        if [[ "$s" == "$DEVICE" ]]; then
            found=1
        fi
    done
    if [[ $found == 1 ]]; then
        connected=1
        return
    fi

    if ! AC-online; then
        debug "On battery; won't attempt connection to $DEVICE"
        return
    fi
        
    msg 'Attempting connection to $DEVICE ...'
    if [ -z "`sudo $HCITOOL cc $DEVICE 2>&1`" ]; then
        msg 'Connected.'
        connected=1
    else
        if [ -z "`l2ping -c 2 $DEVICE 2>&1`" ]; then
            if [ -z "`$HCITOOL cc $DEVICE 2>&1`" ]; then
                msg 'Connected.'
                connected=1
            else
                msg "ERROR: Could not connect to device $DEVICE."
                connected=0
            fi
        fi
    fi
}

function check_xscreensaver {
    PID=`ps -C xscreensaver --no-heading | awk '{ print $1 }'`
    if [ "$PID" == "" ];  then
        $START_CMD &
    fi
}

check_connection

while [[ $connected -eq 0 ]]; do
    check_connection
    sleep 3
done

name=`$HCITOOL name $DEVICE`
msg "Monitoring proximity of '$name' [$DEVICE]";

# switched after $CONSECUTIVE times on opposite side of threshold
state="near"
# number of times proximity has been seen on opposite side of threshold to $state
consecutive=0 

while /bin/true; do

    check_xscreensaver
    check_connection

    if [[ $connected -eq 1 ]]; then
        rssi=$($HCITOOL rssi $DEVICE | sed -e 's/RSSI return value: //g')

        if [[ $rssi -le $THRESHOLD ]]; then
            # -le means further away from phone than threshold.
            if [[ $state == "near" ]]; then
                : $(( consecutive ++ ))
                if [[ $consecutive == 1 ]]; then
                    debug "Device '$name' [$DEVICE] has left proximity ($rssi <= $THRESHOLD)"
                elif [[ $consecutive -lt $CONSECUTIVE ]]; then
                    debug "consecutive times in far state: $consecutive"
                else
                    state="far"
                    consecutive=0
                    msg "Device '$name' [$DEVICE] outside proximity ($rssi <= $THRESHOLD) $CONSECUTIVE consecutive times; running $FAR_CMD"
                    $FAR_CMD > /dev/null 2>&1
                fi
            else
                consecutive=0
            fi
        else
            # Closer to phone than threshold.
            if [[ $state == "far" ]]; then
                : $(( consecutive ++ ))
                if [[ $consecutive == 1 ]]; then
                    debug "Device '$name' [$DEVICE] has returned to proximity ($rssi <= $THRESHOLD)"
                elif [[ $consecutive -lt $CONSECUTIVE ]]; then
                    debug "consecutive times in near state: $consecutive"
                else
                    state="near"
                    consecutive=0
                    msg "Device '$name' [$DEVICE] inside proximity ($rssi <= $THRESHOLD) $CONSECUTIVE consecutive times; running $NEAR_CMD then $START_CMD"
                    $NEAR_CMD
                    $START_CMD &
                fi
            else
                consecutive=0
            fi
        fi
        debug "RSSI = $rssi, state = $state, consec=$consecutive"
    fi

    sleep $CHECK_INTERVAL
done
