#!/bin/bash

# See .xsession-progs.d/person-adam.spiers/01-window-manager and
# .config/systemd/user/monitor-watcher.service for how this gets run.
# (Nothing relevant in .cfg-post.d/desktop-config.)
#
# See also the other *-watcher services.

SETUP=$HOME/bin/setup-monitor

# Function to wait for monitor resolutions to be detected
wait_for_valid_layout() {
    local timeout=30
    local start_time=$(date +%s)

    echo "Waiting for monitor resolutions to stabilize..."

    while true; do
        local current_time=$(date +%s)
        local elapsed=$((current_time - start_time))

        if [ $elapsed -ge $timeout ]; then
            echo "Timeout after ${elapsed}s - proceeding anyway"
            return 1
        fi

        # Clear cache and regenerate
        $HOME/bin/clear-dpy-cache

        # Try to get a valid layout
        if $HOME/bin/get-layout > /dev/null 2>&1; then
            echo "Valid layout detected after ${elapsed}s"
            return 0
        fi

        echo "Retrying in 1s (${elapsed}/${timeout}s elapsed)..."
        sleep 1
    done
}

if ! which inotifywait >&/dev/null; then
    echo "ERROR: Couldn't find inotifywait; aborting." >&2
    echo "Try: sudo zypper in inotify-tools" >&2
    exit 1
fi

if ! which $SETUP >&/dev/null; then
    echo "ERROR: Couldn't find $SETUP; aborting." >&2
    exit 1
fi

log=~/.log/udev-drm.log
udevadm monitor -u -s drm > $log &

# Wait for udevadm to do first modification before proceeding.
sleep 2

# N.B. We can't use entr(1) because that relies on the file
# being closed after update, which udevadm monitor won't do:
# https://github.com/eradman/entr/issues/114

# FIXME: debounce this
while true; do
    # inotifywait -q /dev/input/by-path
    # echo "Input device event detected for DISPLAY=$DISPLAY"

    inotifywait -q -e modify "$log"

    echo "sleeping 1s"
    sleep 1

    echo "Enabling any disabled monitors ..."
    xrandr --auto
    sleep 1

    echo "Current xrandr config:"
    xrandr | cat

    # Read old MD5 hash if it exists
    md5_file=~/.cache/libdpy/inxi-Gxx.monitors.json.md5
    old_md5=""
    if [ -f "$md5_file" ]; then
        old_md5=$(cat "$md5_file")
    fi
    echo "MD5 of existing inxi monitor cache: ${old_md5:-(empty)}"

    # Wait for valid monitor resolutions
    wait_for_valid_layout

    # Calculate new MD5 hash after layout stabilizes
    inxi_monitors_file=~/.cache/libdpy/inxi-Gxx.monitors.json
    if [ -f "$inxi_monitors_file" ]; then
        new_md5=$(md5sum "$inxi_monitors_file" | cut -d' ' -f1)
        echo "$new_md5" > "$md5_file"
    else
        new_md5=""
    fi

    # Only call setup if MD5 hashes differ
    if [ "$old_md5" != "$new_md5" ]; then
        echo "Monitor configuration changed (MD5: ${old_md5:-(empty)} -> ${new_md5:-(empty)}), running setup"
        $SETUP
        echo "$SETUP completed; exit code $?"
    else
        echo "Monitor configuration unchanged (MD5: ${new_md5:-(empty)}), skipping setup"
    fi
done
