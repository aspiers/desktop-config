#!/usr/bin/env python3

import json
import os.path
from pprint import pp
import re
from subprocess import CalledProcessError, run
import sys
import time
from shutil import which

# pip install --user pyfzf
from pyfzf.pyfzf import FzfPrompt


DUMPER = 'chrome-session-dump'
SESSION = os.path.expanduser('~/.config/google-chrome/Default/Sessions')
UNNAMED_WIN_PREFIX = 'Window #'


def die(message):
    sys.stderr.write(message + "\n")
    sys.exit(1)


def get_windows():
    result = run([DUMPER, "-json", SESSION], capture_output=True, check=True)

    j = json.loads(result.stdout)
    if 'windows' not in j:
        die("Didn't find 'windows' key in JSON output:\n\n%s" % result.stdout)

    return j['windows']


def get_tabs(windows):
    tabs = {}

    for window in windows:
        if not window.get('tabs'):
            # Sometimes there's an empty window for some reason.
            continue

        next_index = 1
        for tab in window['tabs']:
            if tab['deleted'] or tab['groupCollapsed']:
                tab['index'] = 0
            else:
                tab['index'] = next_index
                next_index += 1
            tab['window'] = window
            tab_title = tab['title'] or tab['url']
            if window['userTitle']:
                window['title'] = window['userTitle']
            elif tab['active']:
                # FIXME: this is not 100% reliable - if a new tab
                # with URL chrome://newtab/ is focused, it doesn't
                # seem to register as active.
                window['title'] = tab_title
                # print("Found window with title %s" % title)
            if tab['title']:
                search_key = "%s | %s" % (tab['title'], tab['url'])
            else:
                search_key = tab['url']
            tabs[search_key] = tab
    return tabs


def show_windows(windows):
    for window in sorted(windows, key=lambda w: w['title']):
        if 'title' not in window:
            # Sometimes there's an empty window for some reason.
            continue

        print(window['title'])
        for tab in window['tabs']:
            if tab['deleted']:
                print("  deleted: %s" % tab['title'])
            elif tab['groupCollapsed']:
                print("  hidden:  %s" % tab['title'])
            else:
                print("  %3d: %s | %s" % (tab['index'], tab['title'], tab['url']))
        print()


def get_tab_info_for_fzf(windows):
    tabs = []
    for win_index, window in enumerate(windows):
        # print("window %d title=[%s] userTitle=[%s]" % (win_index, window['title'], window['userTitle']))
        if 'title' not in window:
            # Sometimes there's an empty window for some reason.
            continue

        for tab in window['tabs']:
            if tab['deleted'] or tab['groupCollapsed']:
                continue
            tabs.append({
                'window_userTitle': window['userTitle'],
                'window_index': win_index,
                'index': tab['index'],
                'tab_title': tab['title'],
                'url': tab['url']
            })
    return tabs


def get_fzf_input(windows):
    tabs = get_tab_info_for_fzf(windows)
    input = []
    for tab in tabs:
        win_title = tab['window_userTitle']
        if not win_title:
            win_title = UNNAMED_WIN_PREFIX + str(tab['window_index'])
        input.append(
            "%s -~- %3d -~- %s | %s" %
            (win_title, tab['index'], tab['tab_title'], tab['url'])
        )

    return input


def find_tab(substring, tabs):
    for tab_search_key, tab in tabs.items():
        if tab_search_key.lower().find(substring.lower()) != -1 \
           and not tab['groupCollapsed'] \
           and not tab['deleted']:
            return tab


def run_fzf(windows, initial):
    sorted_windows = sorted(windows, key=lambda w: w.get('title') or 'Untitled window')
    input = get_fzf_input(sorted_windows)
    fzf = FzfPrompt()
    options = "--exact --no-sort --layout=reverse"
    if initial:
        options += " --query='%s'" % initial
    choice = fzf.prompt(input, options)[0]

    m = re.match(r'(?P<window>.+) -~-\s+(?P<tabnum>\d+) -~- (?P<tabtitle>.+)', choice)
    if not m:
        die("fzf failed")

    groups = m.groupdict()
    win_title = groups['window']
    if win_title.startswith(UNNAMED_WIN_PREFIX):
        win_index = int(win_title[len(UNNAMED_WIN_PREFIX):])
        win_title = sorted_windows[win_index]['title']
    focus_window_and_tab(win_title, int(groups['tabnum']))


def report_tab_found(tab):
    win = tab['window']
    win_title = win['title']
    print("Found tab: %s" % tab['title'])
    print("\t%s" % tab['url'])
    print("\tTab %d in window: %s" % (tab['index'], win_title))
    print()


def focus_window(title):
    print("Focusing window with title: %s" % title)
    try:
        run(['wmctrl', '-a', title], check=True)
    except CalledProcessError:
        die("wmctrl -a failed")


def focus_window_and_tab(window_title, tab_index):
    release_modifiers()
    focus_window(window_title)
    time.sleep(0.3)
    focus_tab_number(tab_index)
    print("focus-active-window")
    run(['focus-active-window'])


def focus_tab_number(target_tab_index):
    print("Selecting tab #%d" % target_tab_index)
    start_tab_index = target_tab_index
    if target_tab_index == 6:
        # Ctrl+6 toggles between last two tabs
        start_tab_index = 5
    elif target_tab_index > 8:
        # Ctrl+9 goes to the last tab
        start_tab_index = 8
    xdotool_key("ctrl+%d" % start_tab_index)
    for i in range(target_tab_index - start_tab_index):
        xdotool_key("ctrl+Next")


def focus_by_tab(tab):
    focus_window_and_tab(tab['window']['title'], tab['index'])


def release_modifiers():
    modifiers = (
        'Shift_L', 'Shift_R',
        'Control_L',
        'Meta_L',
        'Super_R')
    args = []
    for mod in modifiers:
        args.extend(['keyup', mod])
    exec('xdotool', *args)


def xdotool_key(key):
    exec('xdotool', 'key', key)


def exec(*cmd):
    print(' '.join(cmd))
    try:
        run(cmd, check=True)
    except CalledProcessError:
        die("Failed to execute: %s" % cmd)


def main():
    if not which(DUMPER):
        die("chrome-session-dump not installed; type mrco chrome-session-dump")

    windows = get_windows()
    tabs = get_tabs(windows)

    if len(sys.argv) < 2:
        show_windows(windows)
        return

    if sys.argv[1] == '--fzf':
        run_fzf(windows, ' '.join(sys.argv[2:]))
        return

    substring = ' '.join(sys.argv[1:])
    print("Searching for visible tab containing [%s]" % substring)
    tab = find_tab(substring, tabs)
    if tab:
        report_tab_found(tab)
        focus_by_tab(tab)
    else:
        die("No visible tab found.")


main()
