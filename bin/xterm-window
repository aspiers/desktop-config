#!/bin/bash

. $ZDOTDIR/lib/libdpy.sh
. $ZDOTDIR/lib/libfonts.sh

# Let window manager determine geometry; this is a lot easier to
# manage than discovering individual character dimensions and then
# scaling up from that, especially because it works with proportional
# fonts, and itt's a massive pain to figure out geometries of TrueType
# fonts (see get-ttf-font-geometry).
#
# if shell=$( get-font-geometry $medium_font ); then
#     eval "$shell"
#
#     # Take 80% of height, then allow for window border so that it just
#     # touches the watchlogs window.
#     border_height=25
#     height=$(( (dpy_height - border_height) * 4 / 5 / font_char_height ))
#
#     width=90
#     geometry=${width}x${height}
#
#     if [ "$1" == '--top-left' ]; then
#         geometry=${geometry}+0+0
#         shift
#     fi
#
#     geometry="-g $geometry"
# else
#     echo "WARNING: failed to get geometry of $medium_font font" >&2
#     # exit 1
# fi

if which gnome-terminal >/dev/null 2>&1; then
    # gnome-terminal-config sets font
    gnome-terminal "$@"
elif which urxvt-256color >/dev/null 2>&1; then
    urxvt-256color -fn $medium_font $geometry "$@"
elif which urxvt >/dev/null 2>&1; then
    urxvt -fn $medium_font $geometry "$@"
elif which rxvt-unicode >/dev/null 2>&1; then
    rxvt-unicode -fn $medium_font $geometry "$@"
elif which xterm >/dev/null 2>&1; then
    xterm -fn $medium_font $geometry "$@"
else
    echo >&2 "ERROR: couldn't find any terminal program; aborting."
    exit 1
fi
