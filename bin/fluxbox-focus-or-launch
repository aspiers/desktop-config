#!/bin/bash
#
# Downsides of using this:
#
# - There's no way to reliably tell whether a program is minimized
#   vs. not running.

me=$(basename $0)

CONFIG_DIR="$HOME/.config/fluxbox-focus-or-launch"
DESKTOP_FILE="$CONFIG_DIR/previous-desktop.txt"

usage () {
    # Call as: usage [EXITCODE] [USAGE MESSAGE]
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi

    me=$(basename $0)

    cat <<EOF >&2
Usage: $me [OPTIONS] WINDOW-PATTERN LAUNCH-CMD
Options:
  -h, --help     Show this help and exit
  -c, --class    Match WINDOW-PATTERN against class rather than title
  -r, --role     Match WINDOW-PATTERN against role rather than title
  -t, --toggle   If matching window is focused, minimize it; otherwise focus/launch
  -f, --focus    Focus the window after launching (if launched)

WINDOW-PATTERN is a regexp matching the window title, class, or role.
LAUNCH-CMD is a command for launching the program if it's not found.
EOF

    if [ -n "$1" ]; then
        echo >&2
        echo >&2 "$*"
    fi

    exit "$exit_code"
}

main () {
    if [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
        usage 0
    fi

    while [[ "$1" =~ ^- ]]; do
        case "$1" in
            -c|--class)
                class=y
                shift
                ;;
            -r|--role)
                role=y
                shift
                ;;
            -t|--toggle)
                toggle=y
                shift
                ;;
            -f|--focus)
                focus_after_launch=y
                shift
                ;;
            *)
                usage 1 "Unknown option: $1"
                ;;
        esac
    done

    if [ $# -lt 2 ]; then
        usage 1
    fi

    window_pattern="$1"
    shift

    # Check if toggle mode and window is already focused
    if [ -n "$toggle" ] && window_is_focused; then
        hide_window
        restore_previous_desktop
        exit 0
    fi

    # In toggle mode, store current desktop before focusing/launching
    if [ -n "$toggle" ]; then
        store_current_desktop
        # First try to fetch window from other workspaces if it exists
        fetch_window
    fi

    focus_window

    sleep 0.2
    exit_if_window_focused

    # Exec seems to have been disabled from fluxbox-remote, presumably
    # for the security reasons mentioned in the fluxbox-remote(1) man
    # page.  So we have to launch programs ourselves.
    echo "Launching $* ..."
    nohup "$@" </dev/null >&/dev/null &

    if [ -n "$focus_after_launch" ]; then
        # N.B. this can steal focus unexpectedly if launching takes
        # a while and the user carries on doing other stuff while
        # waiting
        wait_until_window_focused
    fi
}

store_current_desktop () {
    # Create config directory if it doesn't exist
    mkdir -p "$CONFIG_DIR"

    # Get current desktop/workspace number
    local current_desktop=$(xdotool get_desktop)
    echo "$current_desktop" > "$DESKTOP_FILE"
    echo "Stored current desktop: $current_desktop"
}

restore_previous_desktop () {
    if [ -f "$DESKTOP_FILE" ]; then
        local previous_desktop=$(cat "$DESKTOP_FILE")
        echo "Restoring previous desktop: $previous_desktop"
        xdotool set_desktop "$previous_desktop"
        rm "$DESKTOP_FILE"
    fi
}

get_active_window_attribute () {
    local active_window
    if [ -n "$class" ]; then
        xdotool getactivewindow getwindowclassname 2>/dev/null
    elif [ -n "$role" ]; then
        # For role, we need to use xprop to get the WM_WINDOW_ROLE property
        active_window=$(xdotool getactivewindow 2>/dev/null)
        if [ -n "$active_window" ]; then
            xprop -id "$active_window" WM_WINDOW_ROLE 2>/dev/null | sed 's/.*= "\(.*\)"/\1/'
        fi
    else
        xdotool getactivewindow getwindowname 2>/dev/null
    fi
}

window_is_focused () {
    local window_attribute="${1:-$(get_active_window_attribute)}"
    [[ "$window_attribute" =~ $window_pattern ]]
}

get_fluxbox_pattern () {
    if [ -n "$class" ]; then
        echo "(Class=$window_pattern)"
    elif [ -n "$role" ]; then
        echo "(Role=$window_pattern)"
    else
        echo "(Title=$window_pattern)"
    fi
}

fetch_window () {
    local fluxbox_pattern=$(get_fluxbox_pattern)
    local current_desktop=$(<"$DESKTOP_FILE")
    echo "Fetching window matching $fluxbox_pattern to current workspace..."
    cmd="MacroCmd {TakeToWorkspace $(( current_desktop + 1 ))} {If {Matches (Stuck=no)} {Stick}}"
    fluxbox-remote "ForEach {$cmd} {Matches $fluxbox_pattern}"
}

hide_window () {
    local fluxbox_pattern=$(get_fluxbox_pattern)
    echo "Hiding window matching $fluxbox_pattern..."
    cmd="MacroCmd {If {Matches (Stuck=yes)} {Stick}} {SendToWorkspace 6} {Minimize}"
    fluxbox-remote "ForEach {$cmd} {Matches $fluxbox_pattern}"
}

focus_window () {
    local fluxbox_pattern=$(get_fluxbox_pattern)
    echo "NextWindow $fluxbox_pattern"
    fluxbox-remote "NextWindow $fluxbox_pattern"
    sleep 0.1
    # {If {Matches $focus} {Exec focus-active-window}"
}

exit_if_window_focused () {
    local window_attribute
    window_attribute="$(get_active_window_attribute)"

    if window_is_focused "$window_attribute"; then
        echo "Focused window '$window_attribute' matches '$window_pattern'"
        exit 0
    fi
    echo "Focused window '$window_attribute' doesn't match '$window_pattern'"
}

wait_until_window_focused () {
    sleep=0.1
    while (( $(echo "$sleep < 30" | bc) )); do
        echo "Sleeping $sleep ..."
        sleep $sleep
        focus_window
        exit_if_window_focused
        sleep=$(echo "$sleep * 2" | bc)
    done
}

main "$@"
