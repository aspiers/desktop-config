#!/bin/bash

CLIENT_PROG=synergyc
HOST_NAME_FILE=$HOME/.localhost-nickname
CLIENT_NAME_FILE=$HOME/.synergy-client-name
SERVER_NAME_FILE=$HOME/.synergy-server-name
DOMAIN_NAME_FILE=$HOME/.synergy-domain-name

me="`basename $0`"

if [ $# -gt 1 ]; then
  echo "Usage: $me [-a]"
  exit 1
fi

_log_it () {
    logger -t "$me[$$]" "$*"
    echo "$me[$$]" "$*"
}

_alertme () {
    if [ -n "$alertme" ]; then
        alertme "$*" &
    else
        _log_it "$*"
    fi
}

sigexit () {
    _log_it "pid $$ shutting down"
}

if ps -ef | egrep -v "grep| $$ " | grep -q "bash.*$0"; then
    _log_it "$me already running; exiting."
    exit 1
fi

trap sigexit EXIT

if [ "$1" == '-a' ]; then
  alertme=yes
  shift
fi

read_client_conf () {
    clientname=
    [ -f "$CLIENT_NAME_FILE" ] && clientname="$(<$CLIENT_NAME_FILE)"
    [ -n "$clientname" ] && return 0

    [ -f "$HOST_NAME_FILE" ] && clientname="$(<$HOST_NAME_FILE)"
    [ -n "$clientname" ] && return 0

    echo "Put host nickname in $HOST_NAME_FILE or client name in $CLIENT_NAME_FILE" >&2
    exit 1
}

read_conf () {
    read_client_conf

    servername="`cat $SERVER_NAME_FILE`"
    if [ -z "$servername" ]; then
        echo "Put server name in $SERVER_NAME_FILE" >&2
        exit 1
    fi

    domainname="`cat $DOMAIN_NAME_FILE`"
    if [ -z "$domainname" ]; then
        echo "Put domain name in $DOMAIN_NAME_FILE" >&2
        exit 1
    fi
}


_kill () {
    kill "$@" 2>/dev/null
    sleep 3
    kill -9 "$@" 2>/dev/null
}

# returns success (0) if managed to ensure correct invocation is running
ensure_correct_invocation_running () {
    pids=( $(pgrep -u "$USERNAME" "^$CLIENT_PROG$") )

    if [ "${#pids[@]}" == 1 ]; then
        pid="${pids[0]}"
#        _log_it "$CLIENT_PROG already running: pid $pid"

        args=( $( ps --no-headers -o args -p "$pid" ) )
        # bash--
        nargs="${#args[@]}"
        last_argn=$(( $nargs - 1 ))
        last_arg="${args[$last_argn]}"

        restart=
        if [ "$last_arg" != "$servername" ]; then
            # We're pointing at the wrong server
            _log_it "killing invocation pid $pid (has server '$last_arg' not '$servername')"
            restart=1
        elif [[ "${args[*]}" != *" -n $clientname"* ]]; then
            _log_it "killing invocation pid $pid (client should be '$clientname')"
            restart=1
        fi

        [ -z "$restart" ] && return 0

        _kill "$pid"
        pid=
    elif [ "${#pids[@]}" -gt 1 ]; then
        _log_it "multiple instances of $CLIENT_PROG running (${pids[@]}); killing all"
        _kill "${pids[@]}"
    fi

    # No client running now
    "$CLIENT_PROG" -n "$clientname" "$servername" &
    pid=$!

    if [ $? != 0 ]; then
        _alertme "$CLIENT_PROG -n $clientname $servername failed"
        pid=
        return 1
    fi
    
    _log_it "launched $CLIENT_PROG -n $clientname $servername (pid $pid)"
    return 0
}

_log_it "pid $$ started up"

read_conf
if ! IP="`host $servername |
              awk '/has address/ {print $4; found=1}
                   END           {exit found==1 ? 0 : 1}'`"
then
    echo "Couldn't determine IP of $servername; can't check connection type"
    IP=
else
    echo "$servername has IP $IP"
fi

while true; do
    read_conf

    if ! AC-online; then
        reason_not_to_run="AC power offline"
    elif [ -z "$IP" ]; then
        reason_not_to_run="couldn't determine IP of $servername"
    elif [ "`get-connection-type '$IP'`" != 'lan' ]; then
        reason_not_to_run="not on direct wired connection to $servername"
    elif ! grep -q $domainname /etc/resolv.conf; then
        # dnsdomainname doesn't get changed by DHCP for some reason
        #[ "`dnsdomainname 2>&1`" = $domainname ]
        reason_not_to_run="$domainname not found in /etc/resolv.conf"
    elif ! isup "$servername"; then
        reason_not_to_run="cannot reach $servername"
    else
        reason_not_to_run=
    fi

    if [ -n "$reason_not_to_run" ]; then
        if [ -n "$pid" ]; then
            _log_it "$reason_not_to_run; stopping $CLIENT_PROG"
            _kill "$pid"
            pid=
        else
            # In case anyone's watching STDERR
            echo "Not running: $reason_not_to_run"
        fi
        sleep 5
        continue
    fi

    if ! ensure_correct_invocation_running; then
        # Oh dear, can't do much but try again.
        sleep 60
        continue
    fi

    sleep 5
done
