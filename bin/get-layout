#!/usr/bin/python3

import os
import sys
import subprocess
import json
import re
import argparse

# Simplified sys.path modification
sys.path.append(os.path.join(os.getenv('HOME'), 'lib'))
sys.path.append(os.path.join(os.getenv('HOME'), 'bin'))

import libdpy


debug = False


def debug_print(msg):
    if debug:
        print(f"DEBUG: {msg}", file=sys.stderr)


def fatal(msg):
    sys.stderr.write(f"ERROR: {msg}\n")
    sys.exit(1)

def get_localhost_nickname():
    zdotdir = os.environ.get('ZDOTDIR', os.path.expanduser('~')) # Default to ~ if ZDOTDIR not set
    host_name_file = os.path.join(zdotdir, '.localhost-nickname')
    if not os.path.exists(host_name_file):
        sys.stderr.write(f"Put host nickname in {host_name_file}\n")
        sys.exit(1)

    with open(host_name_file, 'r') as f:
        localhost_nickname = f.read().strip()
    if localhost_nickname:
        return localhost_nickname

    sys.stderr.write(".localhost-nickname empty?!")
    sys.exit(1)


def layout_file(layout_name_suffix):
    # print(f"Using {layout_name_suffix} layout in {os.path.expanduser('~/.fluxbox/layouts')}", file=sys.stderr)
    print(os.path.join(os.path.expanduser('~/.fluxbox/layouts'), f"{layout_name_suffix}.yaml"))
    sys.exit(0)


def ensure_primary_set_by_prop(find_by_attribute, search_value):
    inxi_monitors = libdpy.get_inxi_monitors()
    desired_monitor_info = libdpy.find_monitor_by_attribute(find_by_attribute, search_value)

    if not desired_monitor_info:
        sys.stderr.write(f"Info: Monitor not found via inxi: {find_by_attribute}='{search_value}'.\n")
        return

    desired_output_name = (desired_monitor_info.get('mapped') or
                           desired_monitor_info.get('Monitor'))
    if not desired_output_name:
        sys.stderr.write(f"Info: Monitor {desired_monitor_info.get('model', 'Unknown')} found but has no 'mapped' or 'Monitor' in inxi data.\n")
        return

    current_primary_info = libdpy.get_xrandr_primary_monitor()
    current_primary_name = current_primary_info.get('name') if current_primary_info else None

    if current_primary_name == desired_output_name:
        # print(f"{desired_output_name} is already primary (according to xrandr)", file=sys.stderr)
        return

    set_primary(desired_output_name)


def set_primary(desired_output_name):
    # print(f"Attempting to set {desired_output_name} as primary...", file=sys.stderr)
    subprocess.run(['xrandr', '--output', desired_output_name, '--primary'], check=True, capture_output=True, text=True)
    libdpy.clear_cache()
    # print(f"Successfully set {desired_output_name} as primary.", file=sys.stderr)


def benq_bl3200_connected():
    inxi_monitors = libdpy.get_inxi_monitors()
    return libdpy.find_monitor_by_attribute('model', 'BenQ BL3200')


def main():
    global debug
    parser = argparse.ArgumentParser(description="Get monitor layout.")
    parser.add_argument('--debug', action='store_true', help='Enable debug output')
    args = parser.parse_args()
    debug = args.debug

    localhost_nickname = get_localhost_nickname()
    debug_print(f"localhost_nickname: {localhost_nickname}")

    if localhost_nickname == "celtic":
        debug_print("Finding layout for celtic")

        num_monitors = libdpy.monitors_connected()
        debug_print(f"{num_monitors} monitor(s) connected")

        if benq_bl3200_connected():
            debug_print(f"benq_bl3200_connected: True")
            if num_monitors == 2:
                ensure_primary_set_by_prop("model", "BenQ")
                layout_file("celtic+BenQ")
            elif num_monitors == 3:
                ensure_primary_set_by_prop("model", "BenQ")
                layout_file("celtic+BenQ+Dell")

        elif (large_monitor := libdpy.large_monitor_connected()):
            debug_print(f"large monitor connected: {large_monitor['model']}")
            monitor_res = large_monitor["res"]
            ensure_primary_set_by_prop("res", monitor_res)
            layout_file("celtic+large")

        elif libdpy.monitors_connected() == 1:
            screens_data = libdpy.get_xrandr_screen_geometries()
            debug_print(f"single monitor, screens_data: {screens_data}")
            if screens_data: # Should be true if count is 1
                output_name = screens_data[0]['name']
                set_primary(output_name)
                layout_file(localhost_nickname)
            else:
                fatal("Monitor count was 1 but failed to get screen data for primary setting.")

    elif localhost_nickname == "ionian":
        if libdpy.monitors_connected() == 2:
            debug_print("ionian: 2 monitors connected")
            # Assuming "BenQ" is the desired primary
            ensure_primary_set_by_prop("model", "BenQ")
            layout_file(localhost_nickname)

    elif localhost_nickname == "aegean":
        if libdpy.monitors_connected() == 1:
            debug_print("aegean: 1 monitor connected")
            layout_file(localhost_nickname)

    fatal(f"Couldn't figure out which layout to apply for {localhost_nickname}!")


if __name__ == "__main__":
    main()
