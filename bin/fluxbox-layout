#!/usr/bin/env python3

import argparse
from pprint import pp
import subprocess
import os
import os.path
import sys
import time
import yaml

sys.path.append(os.getenv('HOME') + '/lib')

import libdpy
import liblayout


MAGIC_CMDS = {
    '<stick>': 'If {Matches (Stuck=no)} {Stick}',
    '<unstick>': 'If {Matches (Stuck=yes)} {Stick}',
}


def expand_magic(cmd):
    for magic, expansion in MAGIC_CMDS.items():
        cmd = cmd.replace(magic, expansion)
        #print("cmd %s after expanding %s to %s" % (cmd, magic, expansion))
    return cmd


def exec_window_cmds(window_cmds):
    for matcher, *cmds in window_cmds:
        matcher = expand_magic(matcher)
        print(matcher)
        for cmd in cmds:
            expanded = expand_magic(cmd)
            map_cmd = "Map {%s} {Matches %s}" % (expanded, matcher)
            print("   %s" % map_cmd)
            subprocess.check_call(['fluxbox-remote', map_cmd])
            time.sleep(0.1)
        print()


def exec_cmds(cmds):
    for cmd in cmds:
        expanded = expand_magic(cmd)
        print("   %s" % expanded)
        subprocess.check_call(['fluxbox-remote', expanded])
        time.sleep(0.1)

    print()


def parse_args():
    parser = argparse.ArgumentParser(
        description='Activate a fluxbox layout')
    parser.add_argument(
        '--dir',
        type=str,
        default=os.path.expanduser('~/.fluxbox/layouts'),
        help='Directory containing YAML layout files')
    parser.add_argument(
        '-s',
        '--sublayout',
        type=str,
        help='Name of a sublayout to apply instead of full layout')
    parser.add_argument(
        'layout',
        type=str,
        help='Name of a layout pointing to a YAML file with '
        'window matching patterns and commands')
    return parser.parse_args()


def init_magic_cmds(layout_params):
    current_screen = libdpy.get_current_screen_info()
    for i, s in enumerate(layout_params):
        print("Screen %d:" % i)

        for prefix in ('s%d_' % (i + 1), 's_%s_' % s['label']):
            for k, v in s.items():
                k2 = prefix + k
                v2 = str(v) + ("%" if k.endswith('_pc') else '')
                MAGIC_CMDS['<%s>' % k2] = v2
                if i == current_screen['num']:
                    MAGIC_CMDS['<sX_%s>' % k] = v2
                print("  %s: %s" % (k2, v2))

    if '<s_primary_num>' not in MAGIC_CMDS:
        sys.stderr.write(
            "Didn't find <s_primary_num> in MAGIC_CMDS; is your primary monitor set?\n"
        )
        sys.exit(1)

    print()


def apply_sublayout(layout_file, sublayouts, name):
    if not name in sublayouts:
        sys.stderr.write(
            "Didn't find sublayout '%s' in %s\n" %
            (name, sublayout_file)
        )
        sys.exit(1)

    sublayout = sublayouts[name]
    exec_cmds(sublayout)


def main():
    args = parse_args()

    active_win_id = subprocess.check_output(['xdotool', 'getactivewindow']).rstrip()

    layout_file = liblayout.get_layout_file(args.layout, args.dir)
    layout_params, layout = liblayout.get_layout_params(layout_file)
    window_cmds = layout['windows']

    init_magic_cmds(layout_params)

    if args.sublayout:
        sublayout_file = liblayout.get_sublayout_file()
        with open(sublayout_file) as sf:
            sublayouts = yaml.safe_load(sf)
            apply_sublayout(sublayout_file, sublayouts, args.sublayout)
    else:
        # pp(window_cmds)
        exec_window_cmds(window_cmds)

    subprocess.call(['wmctrl', '-ia', active_win_id])


if __name__ == "__main__":
    main()
