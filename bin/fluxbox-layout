#!/usr/bin/env python3

import argparse
from pprint import pp
import subprocess
import os
import os.path
import sys
import time
import yaml

sys.path.append(os.getenv('HOME') + '/lib')

import libdpy


MAGIC_CMDS = {
    '<stick>': 'If {Matches (Stuck=no)} {Stick}',
    '<unstick>': 'If {Matches (Stuck=yes)} {Stick}',
}


def expand_magic(cmd):
    for magic, expansion in MAGIC_CMDS.items():
        cmd = cmd.replace(magic, expansion)
        #print("cmd %s after expanding %s to %s" % (cmd, magic, expansion))
    return cmd


def exec(window_cmds):
    for matcher, *cmds in window_cmds:
        matcher = expand_magic(matcher)
        print(matcher)
        for cmd in cmds:
            expanded = expand_magic(cmd)
            map_cmd = "Map {%s} {Matches %s}" % (expanded, matcher)
            print("   %s" % map_cmd)
            subprocess.check_call(['fluxbox-remote', map_cmd])
            time.sleep(0.1)
        print()


def parse_args():
    parser = argparse.ArgumentParser(
        description='Activate a fluxbox layout')
    parser.add_argument(
        '--dir',
        type=str,
        default=os.path.expanduser('~/.fluxbox/layouts'),
        help='Directory containing YAML layout files')
    parser.add_argument(
        'layout',
        type=str,
        help='Name of a layout pointing to a YAML file with '
        'window matching patterns and commands')
    return parser.parse_args()


def get_layout_file(args):
    if os.path.isabs(args.layout):
        return args.layout
    return os.path.join(args.dir, args.layout) + '.yaml'


def percent(x, y):
    return round(x / y * 100)


def init_magic_cmds(layout_file, layout):
    screens = libdpy.extract_xrandr_screen_geometries()
    if len(screens) != len(layout['screens']):
        sys.stderr.write(
            "xrandr got %d screens but %s had %d screens" %
            (len(screens), len(layout['screens']))
        )
        sys.exit(1)

    for i, screen in enumerate(screens):
        print("Screen %d:" % i)
        screen_layout = layout['screens'][i]
        s = screen.copy()
        s.update(screen_layout)

        s.setdefault('left_margin', 0)
        s.setdefault('cols_1_2_margin', 0)
        s.setdefault('right_margin', 0)
        s.setdefault('top_margin', 0)
        s.setdefault('bottom_margin', 0)
        s['active_width'] = s['width'] - s['left_margin'] - s['right_margin']
        s['active_width_pc'] = percent(s['active_width'], s['width'])
        s['col1_width'] = int(s['col1_width_pc_of_active'] * s['active_width'] / 100)
        s['col1_left'] = s['left_margin']
        s['col1_right'] = s['col1_left'] + s['col1_width']
        s['col2_left'] = s['col1_right'] + s['cols_1_2_margin']
        s['col2_width'] = int(s['col2_width_pc_of_active'] * s['active_width'] / 100)
        s['col2_right'] = s['col2_left'] + s['col2_width']

        s['logs_height'] = int(s['logs_height_pc'] * s['height'] / 100)

        s['active_height'] = s['height'] - s['top_margin'] - s['panel_height'] - s['logs_height']
        s['active_height_pc'] = percent(s['active_height'], s['height'])
        s['2row_height'] = int(s['active_height'] / 2)

        s['head'] = s['head']
        s['SetHead'] = 'SetHead %d' % s['head']

        for prefix in ('s%d_' % (i + 1), 's_%s_' % s['label']):
            for k, v in s.items():
                k2 = prefix + k
                v2 = str(v) + ("%" if k.endswith('_pc') else '')
                MAGIC_CMDS['<%s>' % k2] = v2
                print("  %s: %s" % (k2, v2))

    print()


def main():
    args = parse_args()

    active_win_id = subprocess.check_output(['xdotool', 'getactivewindow']).rstrip()

    layout_file = get_layout_file(args)
    with open(layout_file) as f:
        layout = yaml.safe_load(f)
        window_cmds = layout['windows']
        init_magic_cmds(layout_file, layout)
        # pp(window_cmds)
        exec(window_cmds)

    subprocess.call(['wmctrl', '-ia', active_win_id])


main()
