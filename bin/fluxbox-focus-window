#!/usr/bin/env python3

import subprocess
import time
import sys

def get_mouse_location():
    result = subprocess.run(['xdotool', 'getmouselocation', '--shell'], capture_output=True, text=True)
    location = {}
    for line in result.stdout.splitlines():
        key, value = line.split('=')
        location[key] = int(value)
    return location

def main():
    # Get original active window
    result = subprocess.run(['xdotool', 'getactivewindow'], capture_output=True, text=True)
    orig_window = result.stdout.strip()

    # Get original mouse location
    orig_location = get_mouse_location()

    # Move mouse to a corner.  This is a horrible hack to avoid
    # fluxbox's focus follows mouse incorrectly activating after the
    # NextWindow command.  This can happen if we're on a different
    # workspace and if after NextWindow switches to the workspace
    # containing the desired window to focus, the mouse position is
    # over a different window - then that other window ends up with
    # the focus.  Seems like a bug in fluxbox.
    subprocess.run(['mousemove', str(-2), str(-2)])
    corner_location = get_mouse_location()
    corner_x, corner_y = corner_location['X'], corner_location['Y']

    # Execute fluxbox-remote with provided arguments
    subprocess.run(['fluxbox-remote', *sys.argv[1:]])

    # Wait for focus to succeed
    time.sleep(0.3)

    # Get current active window
    result = subprocess.run(['xdotool', 'getactivewindow'], capture_output=True, text=True)
    current_window = result.stdout.strip()

    if current_window == orig_window:
        # Didn't find the window, move mouse back to original position
        subprocess.run(['mousemove', str(orig_location['X']), str(orig_location['Y'])])
    else:
        # Found the window, focus it
        subprocess.run(['focus-active-window'])

if __name__ == "__main__":
    main()
