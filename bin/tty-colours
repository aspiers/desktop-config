#!/usr/bin/perl
# Author: Todd Larason <jtl@molehill.org>
# $XFree86: xc/programs/xterm/vttests/256colours2.pl,v 1.2 2002/03/26 01:46:43 dickey Exp $

# use the resources for colours 0-15 - usually more-or-less a
# reproduction of the standard ANSI colours, but possibly more
# pleasing shades

use strict;
use warnings;

use Getopt::Long;

Getopt::Long::Configure('bundling');

my %opts = ( verbosity => 1 );
GetOptions(
  \%opts,
  'help|h',
  '88|8',
  'find|f:s',
  'set|s',
  'skew|k:f',
  'verbosity|v+',
) or usage();
usage() if @ARGV > 0 or $opts{help};

$opts{verbosity} = 0 if $opts{quiet};
$opts{skew} = 1.3 if exists $opts{skew} and $opts{skew} == 0;

sub usage {
  warn @_, "\n" if @_;

  (my $ME = $0) =~ s,.*/,,;

  die <<EOUSAGE;
Usage: $ME [options]
Options:
  -h, --help        Show this help
  -s, --set         Set colours (optionally darkening by SKEW factor)
  -k, --skew=[SKEW] Darken by SKEW factor [defaults to 1.3]
                    Without -s, show proposed changes.
  -f, --find=RRGGBB Find the colour closest to the given RRGGBB colour
  -8, --88          Use 88 colour mode
  -q, --quiet       Don't output when setting
  -v, --verbose[=N] Increase [specify] verbosity [defaults to 1]
EOUSAGE
}

my $mode = $opts{88} ? 88 : 256;
my ($system, $cube_side, $greyscale, $max);

if ($mode == 256) {
  # 256 colour mode is
  #     16 system colours
  #  + 216 cube colours (6x6x6)
  #  +  24 greyscale colours
  $system    = 16;
  $cube_side = 6;
  $greyscale = 24;
}
elsif ($mode == 88) {
  #  88 colour mode is
  #     16 system colours
  #  +  64 cube colours (4x4x4)
  #  +   8 greyscale colours
  $system    = 16;
  $cube_side = 4;
  $greyscale = 8;
}
else {
  die "Invalid mode with $mode colours\n";
}

$max  = $cube_side - 1;
my $step = 255 / $max;

my $cube_colours = $cube_side ** 3;
my $total = $system + $cube_colours + $greyscale;
die "BUG: Total colours $total doesn't match mode $mode\n"
  unless $mode == $total;

if ($opts{find}) {
  find_colour($opts{find});
}
elsif ($opts{set}) {
  set_colours();
  show_colours() if $opts{verbosity} > 1;
}
else {
  if (exists $opts{skew}) {
    set_colours();
  }
  else {
    show_colours();
  }
}

sub show_colours {
  print "Mode: $mode colours";
  print " (specify --88 as CLI argument to change)" unless $opts{88};
  print "\n\n";

  print "System colours:\n";
  for (my $colour = 0; $colour < ($system / 2); $colour++) {
    print "\e[48;5;${colour}m. ";
  }
  print "\e[0m\n";
  for (my $colour = ($system / 2); $colour < $system; $colour++) {
    print "\e[48;5;${colour}m. ";
  }
  print "\e[0m\n\n";

  my $red_inc   = $cube_side ** 2;
  my $green_inc = $cube_side ** 1;
  my $blue_inc  = $cube_side ** 0;
  # Moving one cube to the right increases the amount of red
  # Moving one row down          increases the amount of green
  # Moving one colour right      increases the amount of blue

  print "Colour cube, ${cube_side}x${cube_side}x${cube_side}:\n";

  my $cube_width  = $cube_side * 2;
  my $left_margin = 4;
  my $intercube_margin = 1;
  my $line_length = $left_margin
                  + ($cube_width + $intercube_margin) * $cube_side;
  my $line_centre = int($line_length / 2);
  my $centred = $line_centre - 1;
  print "\n", ' ' x $centred, "red\n";

  # Print red shift axis above cubes.
  print "    ";
  for (my $red = 0; $red < $cube_side; $red++) {
    printf "%-${cube_width}s ", "+" . ($system + $red * $red_inc);
  }
  print "\n";

  # Print color cubes, with green shift axis in left margin
  for (my $green = 0; $green < $cube_side; $green++) {
    printf "%3s ", $green ? "+" . ($green * $green_inc) : 'grn';
    for (my $red = 0; $red < $cube_side; $red++) {
      for (my $blue = 0; $blue < $cube_side; $blue++) {
        my $colour = $system
                   + ($red   * $red_inc  )
                   + ($green * $green_inc)
                   + ($blue  * $blue_inc );
        print "\e[48;5;${colour}m. ";
      }
      print "\e[0m ";
    }
    print "\n";
  }

  # Print blue shift axes underneath cubes.
  print "    ";
  for (my $red = 0; $red < $cube_side; $red++) {
    for (my $blue = 0; $blue < $cube_side; $blue++) {
      printf "%-2d", $blue;
    }
    print " ";
  }
  print "\n";
  $centred = $line_centre - 1;
  print ' ' x $centred, "blue\n";

  print "\nGreyscale ramp:\n";
  for (my $colour = $system + $cube_colours; $colour < $total; $colour++) {
    print "\e[48;5;${colour}m. ";
  }
  print "\e[0m\n";
  print "\nSee also show-colours.\n";
}

sub skew {
  my ($val, $max) = @_;
  my $new =  ($val / $max) ** ($opts{skew} || 1) * $max;
  return int($new + 0.5);
}

sub set_colour {
  my ($type, $colour_number, $red_256, $green_256, $blue_256) = @_;
  if ($opts{set}) {
    debug(2, sprintf "Setting $type colour %d to rgb:%02x/%02x/%02x",
          $colour_number, $red_256, $green_256, $blue_256);
    printf "\e]4;%d;rgb:%02x/%02x/%02x\e\\",
      $colour_number, $red_256, $green_256, $blue_256;     
  }
  else {
    printf "Would set %d to rgb:%02x/%02x/%02x\n",
      $colour_number, $red_256, $green_256, $blue_256;     
  }
}

sub set_grey {
  my ($colour_number, $level) = @_;
  set_colour('greyscale', $colour_number, $level, $level, $level);
}

sub set_colours {
  # grep for "ESC ] Ps;Pt ST" in urxvt(7)

  for (my $red = 0; $red < $cube_side; $red++) {
    for (my $green = 0; $green < $cube_side; $green++) {
      for (my $blue = 0; $blue < $cube_side; $blue++) {
        # Original code mapped red (0..5) to (0, 95, 135, 175, 215, 255)
        my $red_256   = skew($red   * $step, 255);
        my $green_256 = skew($green * $step, 255);
        my $blue_256  = skew($blue  * $step, 255);
        my $colour_number = cube_to_flat($red, $green, $blue);
        set_colour('cube', $colour_number, $red_256, $green_256, $blue_256);
      }
    }
  }

  debug(2, "");

  # greyscale ramp intentionally leaves out black and white
  my $grey_step = 255 / ($greyscale + 2);
  for (my $grey = 0; $grey < $greyscale; $grey++) {
    my $colour_number = $system + $cube_colours + $grey;
    my $level = $grey_step * ($grey + 1);
    set_grey($colour_number, $level);
  }

  debug(2, "");
}

sub cube_to_flat {
  my ($red, $green, $blue) = @_;
  return $system
       + ($red * ($cube_side ** 2))
       + ($green * $cube_side)
       + $blue;
}

sub find_colour {
  my ($colour) = @_;
  usage("$colour is not a valid colour.  Use RRGGBB format.")
    unless $colour =~ /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i;

  my @target_components = ($1, $2, $3);
  my @achieved_components;
  my @achieved_components_256;
  # For each of red, green and blue, find the component available
  # in the palette closest to the component we actually want.
  for my $i (0, 1, 2) {
    # best fit so far
    my $best;
    my $best_256 = -999;
    my $target = hex($target_components[$i]);
    printf "$i: Aiming for $target (0x%02x)\n", $target;
    for (my $j = 0; $j < $cube_side; $j++) {
      my $available = skew($j * $step, 255);
      printf "$i:   Considering 0x%02x\n", $available;
      if (abs($available - $target) < abs($best_256 - $target)) {
        print "$i:      New closest: $j\n";
        $best = $j;
        $best_256 = $available;
      }
    }
    $achieved_components[$i]     = $best;
    $achieved_components_256[$i] = $best_256;
  }
  printf "color%d %d/%d/%d #%02x%02x%02x\n",
    cube_to_flat(@achieved_components),
    @achieved_components,
    @achieved_components_256;
}

sub debug {
  my $level = shift;
  warn @_, "\n" if $opts{verbosity} >= $level;
}
