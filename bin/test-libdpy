#!/bin/bash

# Quick and dirty checks to make sure libdpy is working correctly

set -e

. ~/lib/libhost.sh
read_localhost_nickname

~/lib/libdpy.py
~/lib/libdpy.py --inxi-json --no-use-cache
~/lib/libdpy.py --inxi-json

case "$localhost_nickname" in
    celtic)
        ~/lib/libdpy.py --find-by-model BOE
        ;;
    ionian)
        ~/lib/libdpy.py --find-by-model 'BenQ BL3200'
        ;;
    *)
        echo "Skipping --find-by-model test for $localhost_nickname"
        ;;
esac

if ~/lib/libdpy.py --find-by-res 12345; then
    echo "Shouldn't find resolution 12345"
    exit 1
else
    echo "Got expected error - good"
fi
~/lib/libdpy.py --find-xrandr-primary

monitors-connected
monitor-models-connected
current-screen-info
get-layout
screen-coords 50% 50%

# Test MD5 stability for JSON caches
test_cache_md5_stability() {
    local test_name="$1"
    local cache_command="$2" 
    local md5_file="$3"
    
    # Expand tilde in file path
    md5_file=$(eval echo "$md5_file")
    
    ~/bin/clear-dpy-cache
    eval "$cache_command" > /dev/null
    local md5_1=$(cat "$md5_file")
    
    ~/bin/clear-dpy-cache
    eval "$cache_command" > /dev/null
    local md5_2=$(cat "$md5_file")
    
    if [ "$md5_1" != "$md5_2" ]; then
        echo "FAIL: $test_name MD5 unstable: $md5_1 != $md5_2"
        exit 1
    else
        echo "PASS: $test_name MD5 stable: $md5_1"
    fi
}

echo "Testing MD5 stability for JSON caches..."

test_cache_md5_stability "XrandrJsonCache" "~/lib/libdpy.py" "~/.cache/libdpy/xrandr.json.md5"
test_cache_md5_stability "InxiJsonCache" "~/lib/libdpy.py --inxi-json" "~/.cache/libdpy/inxi-Gxx.json.md5"
test_cache_md5_stability "InxiMonitorsCache" "monitors-connected" "~/.cache/libdpy/inxi-Gxx.monitors.json.md5"

echo "All MD5 stability tests passed!"
