! {{{ foreground/background

#ifdef BLACK_BG_XTERMS

XTerm*background:   black
nxterm*background:  black
Rxvt*background:    black
xterm*background:   black

XTerm*foreground:   white
nxterm*foreground:  white
Rxvt*foreground:    white
xterm*foreground:   RGB:F/F/E

#else

XTerm*background:   white
nxterm*background:  white
rxvt*background:    white

XTerm*foreground:   black
nxterm*foreground:  black
rxvt*foreground:    black

#endif

! }}}

! {{{ other colours

*xterm*color0: rgb:00/00/00
*xterm*color1: rgb:aa/00/00
*xterm*color2: rgb:00/88/00
*xterm*color3: rgb:aa/55/22
*xterm*color4: rgb:10/00/b6
*xterm*color5: rgb:aa/00/aa
!*xterm*color6: rgb:00/aa aa
*xterm*color6: rgb:79/ae/a6
*xterm*color7: rgb:e0/e0/e0
*xterm*color8: rgb:55/55/55
*xterm*color9: rgb:ff/44/44
!*xterm*color10: rgb:44/ff/44
*xterm*color10: rgb:9e/db/96
!*xterm*color11: rgb:ff/ff/44
*xterm*color11: rgb:f7/ff/a6
!*xterm*color12: rgb:44/44/ff
*xterm*color12: rgb:51/55/c8
*xterm*color13: rgb:ff/44/ff
!*xterm*color14: rgb:44/ff/ff
*xterm*color14: rgb:be/eb/f4
*xterm*color15: rgb:ff/ff/ff

! }}}

! {{{ bold/underline colours

! Use color or bold/underline for bold/underline?
*xterm*colorBDMode: off
*xterm*colorULMode: on

#ifdef BLACK_BG_XTERMS

*VT100*colorBD:     white
*VT100*colorUL:     yellow

#else

*VT100*colorBD:     black
*VT100*colorUL:     blue

#endif

! }}}
! {{{ font

!xterm*font:        10x20
!nxterm*font:       10x20

xterm*font:         9x15
nxterm*font:        9x15

! }}}
! {{{ cursor

XTerm*cursorColor:  blue
nxterm*cursorColor: blue

xterm*fullCursor:   true
nxterm*fullCursor:  true

! }}}

! {{{ geometry

xterm.vt100.geometry: 92x40

! }}}

! {{{ menus

xterm*SimpleMenu.background:    gray50
nxterm*SimpleMenu.background:   gray75

xterm*SimpleMenu.foreground:    black
nxterm*SimpleMenu.foreground:   black

! {{{ font menu

! Please email <gjb@cs.duke.edu> if you have a better
! way of introducing a newline into a macro expansion
! I get the NL by including an extra argument to the macro for which
! I always use a literal newline as the argument
#define FontAndLabel(cFont,sz,NL,lbl) \
xterm*VT100*font/**/cFont/**/: sz/**/NL \
xterm*fontMenu*font/**/cFont/**/*Label: lbl (/**/sz/**/)NL \
nxterm*VT100*font/**/cFont/**/: sz/**/NL \
nxterm*fontMenu*font/**/cFont/**/*Label: lbl (/**/sz/**/)NL

#ifndef SMALL_SCREEN

*SimpleMenu*font: *helvetica*r*normal*12*
XDvi*font: *helvetica*r*normal*12*
FontAndLabel(1,5x7,
,Micro)
FontAndLabel(2,5x8,
,Tiny)
FontAndLabel(3,6x10,
,Small)
FontAndLabel(4,fixed,
,Medium)
FontAndLabel(5,9x15,
,Large)
FontAndLabel(6,10x20,
,Very Large)
FontAndLabel(7,12x24,
,Huge)

#else

*SimpleMenu*font: *helvetica*r*normal*10*
XDvi*font: *helvetica*r*normal*10*
FontAndLabel(1,5x7,
,Micro)
FontAndLabel(2,5x8,
,Tiny)
FontAndLabel(3,6x9,
,Small)
FontAndLabel(4,7x13,
,Medium)
FontAndLabel(5,9x15,
,Large)
FontAndLabel(6,10x20,
,Huge)
FontAndLabel(7,8x16,
,Alternate Large)

#endif

! }}}

! }}}

! {{{ scrolling

XTerm*saveLines:    1500
nxterm*saveLines:   1500
rxvt*saveLines:     1500

XTerm*scrollBar:    false
nxterm*scrollBar:   false
xterm*rightScrollBar: true

*scrollTtyOutput:   False
*scrollKey:     True
Scrollbar.JumpCursor:   True

xterm*VT100.JumpScroll:  true
nxterm*VT100.JumpScroll: true
XTerm.VT100.JumpScroll: true

! }}}
! {{{ key and mouse translations

! Good reference here:
!   http://www.in-ulm.de/~mascheck/X11/xterm/XTerm
! 
! From
! http://moat.nlanr.net/Software/OC3mon/DOSCoraldist19980317/REMCTL/XDEFAULT.UNX
! :-
!
!   in case you are wondering, magic words like 
!   "Prior" and "BackSpace" are all listed in 
!   	/usr/local/X11R6/include/X11/keysymdef.h
!   with "XK_" in front of the name you can use here
!
!   boy, is it frustrating to try guessing 'em!
!
!   apparently, tilde in front of a shift means "not this shift"
!   and exclaimation point in front of a shift means "just this shift"
!
!   but the ~Shift somehow doesn't work on IRIX 6.3 X display
!   in front of the lines that define ctrl-alt-L and ctrl-alt-X,
!   even though it works fine for ctrl-alt-delete, so you need
!   to take "~Shift" off the front of those definitions (which means
!   that shift-ctrl-alt-L will have the same definition as ctrl-alt-L)
!   if you live in that world
!
! In rxvt, Ctrl-Shift-Prior/Next is a bug which needs to be patched:
!
! http://lists.debian.org/debian-qa-packages/2005/10/msg00112.html
! http://bugs.donarmstrong.com/cgi-bin/bugreport.cgi?bug=226386
! TODO: Check http://sourceforge.net/projects/rxvt

XTerm.vt100.translations: #override \
               None <Key> BackSpace:     string(0x7F)\n\
 !Meta              <Key> BackSpace:     string(0x1b) string(0x7F)\n\
               None <Key> Delete:        string(0x04)\n\
               None <Key> Home:          string(0x1b) string("[1~")\n\
               None <Key> End:           string(0x1b) string("[4~")\n\
\
               None <Key> Prior:         string(0x1b) string("[5~")\n\
               None <Key> Next:          string(0x1b) string("[6~")\n\
             !Shift <Key> Prior:         scroll-back(1,halfpage)\n\
             !Shift <Key> Next:          scroll-forw(1,halfpage)\n\
       !Ctrl        <Key> Prior:         string(0x1b) string("[5\^")\n\
       !Ctrl        <Key> Next:          string(0x1b) string("[6\^")\n\
        Ctrl  Shift <Key> Prior:         string(0x1b) string("[5@")\n\
        Ctrl  Shift <Key> Next:          string(0x1b) string("[6@")\n\
  Meta  Ctrl        <Key> Prior:         string(0x1b) string("[5@")\n\
  Meta  Ctrl        <Key> Next:          string(0x1b) string("[6@")\n\
 !Meta              <Key> Prior:         string(0x1b) string("[5@")\n\
 !Meta              <Key> Next:          string(0x1b) string("[6@")\n\
\
                    <Btn4Down>,<Btn4Up>: scroll-back(1,halfpage)\n\
                    <Btn5Down>,<Btn5Up>: scroll-forw(1,halfpage)\n\
             !Shift <Btn4Down>,<Btn4Up>: scroll-back(1,line)\n\
             !Shift <Btn5Down>,<Btn5Up>: scroll-forw(1,line)\n\
       !Ctrl        <Btn4Down>,<Btn4Up>: scroll-back(1,page)\n\
       !Ctrl        <Btn5Down>,<Btn5Up>: scroll-forw(1,page)\n\
\
       !Ctrl        <Key> less:          smaller-vt-font\n\
       !Ctrl        <Key> greater:       larger-vt-font\n\
\
  Meta  Ctrl        <Key> slash:         dabbrev-expand

xterm.vt100.translations: #override \
               None <Key> BackSpace:     string(0x7F)\n\
 !Meta              <Key> BackSpace:     string(0x1b) string(0x7F)\n\
               None <Key> Delete:        string(0x04)\n\
               None <Key> Home:          string(0x1b) string("[1~")\n\
               None <Key> End:           string(0x1b) string("[4~")\n\
\
               None <Key> Prior:         string(0x1b) string("[5~")\n\
               None <Key> Next:          string(0x1b) string("[6~")\n\
             !Shift <Key> Prior:         scroll-back(1,halfpage)\n\
             !Shift <Key> Next:          scroll-forw(1,halfpage)\n\
       !Ctrl        <Key> Prior:         string(0x1b) string("[5\^")\n\
       !Ctrl        <Key> Next:          string(0x1b) string("[6\^")\n\
        Ctrl  Shift <Key> Prior:         string(0x1b) string("[5@")\n\
        Ctrl  Shift <Key> Next:          string(0x1b) string("[6@")\n\
  Meta  Ctrl        <Key> Prior:         string(0x1b) string("[5@")\n\
  Meta  Ctrl        <Key> Next:          string(0x1b) string("[6@")\n\
 !Meta              <Key> Prior:         string(0x1b) string("[5@")\n\
 !Meta              <Key> Next:          string(0x1b) string("[6@")\n\
\
                    <Btn4Down>,<Btn4Up>: scroll-back(1,halfpage)\n\
                    <Btn5Down>,<Btn5Up>: scroll-forw(1,halfpage)\n\
             !Shift <Btn4Down>,<Btn4Up>: scroll-back(1,line)\n\
             !Shift <Btn5Down>,<Btn5Up>: scroll-forw(1,line)\n\
       !Ctrl        <Btn4Down>,<Btn4Up>: scroll-back(1,page)\n\
       !Ctrl        <Btn5Down>,<Btn5Up>: scroll-forw(1,page)\n\
\
       !Ctrl        <Key> less:          smaller-vt-font\n\
       !Ctrl        <Key> greater:       larger-vt-font\n\
\
  Meta  Ctrl        <Key> slash:         dabbrev-expand

! In the scrollbar we map buttons 5 & 4 to 1 and 2 otherwise, core
! dump.  This will move proportionally to cursor position, but we
! don't know how to program the same exact behavior as in the text
! widget.

XTerm.vt100.Scrollbar.translations: #override\n\
     <Btn5Down>: StartScroll(Forward)\n\
     <Btn4Down>: StartScroll(Backward)\n\

! }}}
! {{{ title bar

xterm*titleBar:     false
nxterm*titleBar:    false

! }}}

! {{{ Meta key

*eightBitInput: false
*EightBitInput: false
remotexterm*eightBitInput:  false
XTerm.VT100.EightBitInput:      false

! }}}

! {{{ bell

xterm*visualBell:   true
nxterm*visualBell:  true
!XTerm*visualBell:       true

! }}}
! {{{ terminal type

xterm*termName:          xterm-color
nxterm*termName:         xterm-color

! }}}

! {{{ selection

! gotta have this one to trim trailing whitespace:
xterm*trimSelection: true
! but not sure about this one:
xterm*cutNewline: true

! }}}
! {{{ AutoWrap

xterm*VT100.AutoWrap:    true
nxterm*VT100.AutoWrap:   true
XTerm.VT100.AutoWrap:   true

! }}}
! {{{ reverseWrap

! what is this?
xterm*reverseWrap:  true
nxterm*reverseWrap: true
XTerm.VT100.ReverseWrap:        true

! }}}
! {{{ pointer shape?

nxterm*Cursor: xterm

! }}}

! {{{ locale stuff

! *numeric:           C
! *displayLang:       C
! *basicLocale:       C
! *timeFormat:        C
! *inputLang:         C

! }}}

