<%
def id_file(mode)
  "~/tmp/.fluxbox-#{mode}-id"
end

def notify(msg, timeout=3000, mode=nil)
  s = %<Exec notify-send -t #{timeout} '#{msg}'>
  s += " -p >#{id_file mode}" if mode
  return s
end

def notify_transient(msg, mode)
  notify(msg, 3000, mode)
end

def notify_persistent(msg, mode)
  notify(msg, 999999, mode)
end

def notify_replace(msg, mode, timeout=3000)
  %<{Exec notify-send -t #{timeout} -r $(cat #{id_file(mode)}) '#{msg}'}>
end

def notify_done(mode)
  notify_replace "fluxbox #{mode} done", mode
end
%>

Control Mod1 Mod4 r :MacroCmd {Exec fluxbox-reconfigure && notify-send -t 3000 'Reloaded fluxbox config'}
Shift Control Mod1 Mod4 r :MacroCmd {Restart} {<%= notify 'Restarted fluxbox' %>}

# Click on the desktop to get menus.  Make sure xfdesktop isn't running
# as it will intercept the mouse clicks.
# https://unix.stackexchange.com/questions/233423/fluxbox-toggle-rootmenu-using-mouse1#234578
OnDesktop Mouse1 :If {Matches (Name!=)} {RootMenu} {HideMenus}
OnDesktop Mouse2 :If {Matches (Name!=)} {WorkspaceMenu} {HideMenus}
OnDesktop Mouse3 :If {Matches (Name!=)} {CustomMenu ~/.fluxbox/fluxboxmenu} {HideMenus}
Control Mod1 Mouse4 :LeftWorkspace
Control Mod1 Mouse5 :RightWorkspace

Shift Mod1 Mouse4 :MacroCmd {Raise} {TakeToPrevWorkspace}
Shift Mod1 Mouse5 :MacroCmd {Raise} {TakeToNextWorkspace}

Mod4 Return :RootMenu
Control Mod4 Return :CustomMenu ~/.fluxbox/fluxboxmenu
Shift Mod4 Return :WindowMenu
Mod1 Mod4 Return :ClientMenu
Mod4 j :CustomMenu ~/.fluxbox/jumpmenu
Mod4 o :CustomMenu ~/.fluxbox/org-menu

# scroll on the desktop to change workspaces
OnDesktop Mouse4 :LeftWorkspace
OnDesktop Mouse5 :RightWorkspace

# scroll on the toolbar to change current window
OnToolbar Mouse4 :PrevWindow {static groups} (iconhidden=no)
OnToolbar Mouse5 :NextWindow {static groups} (iconhidden=no)

# alt + left/right click to move/resize a window
OnWindow Mod1 Mouse1 :MacroCmd {Raise} {Focus} {StartMoving}
OnWindowBorder Move1 :StartMoving

OnWindow Mod1 Mouse3 :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}
OnLeftGrip Move1 :StartResizing bottomleft
OnRightGrip Move1 :StartResizing bottomright

# raise/lower with mouse
OnTitlebar Mouse4 :Raise
OnTitlebar Mouse5 :Lower
OnWindow Mod1 Mouse4 :Raise
OnWindow Mod1 Mouse5 :Lower

# control-click a window's titlebar and drag to attach windows
OnTitlebar Control Mouse1 :StartTabbing

# double click on the titlebar to shade
OnTitlebar Double Mouse1 :Shade

# left click on the titlebar to move the window
OnTitlebar Mouse1 :MacroCmd {Raise} {Focus} {ActivateTab}
OnTitlebar Move1  :StartMoving

# middle click on the titlebar to lower
OnTitlebar Mouse2 :Lower

# right click on the titlebar for a menu of options
OnTitlebar Mouse3 :WindowMenu

<%
def focus_active(delay=10, sync=false)
  "Delay {Exec focus-active-window%s} #{delay * 1000}" % [
    sync ? ' --sync' : ''
  ]
end
%>

# cycle windows on current display and workspace
Mod4 slash :MacroCmd {NextWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {<%= focus_active %>}
# allow shift to "cancel" / undo:
Shift Mod4 slash :MacroCmd {PrevWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {<%= focus_active %>}

# cycle windows on any display, current workspace
# probably not useful since makes more sense to switch workspace manually first
# Shift Mod4 slash :MacroCmd {NextWindow (workspace=[current]) (FocusHidden=no)} {<%= focus_active %>}

# FIXME: figure out how to cycle without raising the focused window.
# According to fluxbox-keys(5) man page, this should only raise windows
# temporarily due to the binding using a modifier key, but it always
# leaves the window raised.
#Control Mod4 slash :NextWindow (workspace=[current])
#Control Shift Mod4 slash :PrevWindow (workspace=[current])

# So instead, use these bindings to cycle through tabs in the current window.
Control Mod4 slash :NextWindow (workspace=[current])
Control Shift Mod4 slash :PrevTab

# FIXME: Focus* are missing support for client patterns like the other commands
Mod4 Left :MacroCmd {FocusLeft} {<%= focus_active %>} {Delay {Raise} 10000}
Mod4 Right :MacroCmd {FocusRight} {<%= focus_active %>} {Delay {Raise} 10000}
Mod4 Up :MacroCmd {FocusUp} {<%= focus_active %>} {Delay {Raise} 10000}
Mod4 Down :MacroCmd {FocusDown} {<%= focus_active %>} {Delay {Raise} 10000}

Control Mod4 Left :MacroCmd {FocusLeft}
Control Mod4 Right :MacroCmd {FocusRight}
Control Mod4 Up :MacroCmd {FocusUp}
Control Mod4 Down :MacroCmd {FocusDown}

<% if false && %w(aegean).include?(ENV['localhost_nickname']) %>
# aegean only:
Mod4 h :MacroCmd {FocusLeft} {<%= focus_active %>}
Mod4 l :MacroCmd {FocusRight} {<%= focus_active %>}
Mod4 k :MacroCmd {FocusUp} {<%= focus_active %>}
Mod4 j :MacroCmd {FocusDown} {<%= focus_active %>}
<% end %>

# current window commands
Mod4 space :Raise
Mod4 l :MacroCmd {Lower} {<%= focus_active %>}
Mod1 Mod4 l :Lower
Mod4 i :Minimize
Mod4 m :Maximize
Shift Mod4 m :MaximizeVertical
Control Mod4 m :MaximizeHorizontal
Shift Mod4 s :StickWindow
Mod4 q :Close
Control Mod4 q :Kill

Shift Mod4 Left :MoveLeft 10
Shift Mod4 Right :MoveRight 10
Shift Mod4 Up :MoveUp 10
Shift Mod4 Down :MoveDown 10

Shift Mod1 Mod4 Left :MoveLeft 50
Shift Mod1 Mod4 Right :MoveRight 50
Shift Mod1 Mod4 Up :MoveUp 50
Shift Mod1 Mod4 Down :MoveDown 50

Shift Mod4 h :MoveLeft 10
Shift Mod4 l :MoveRight 10
Shift Mod4 k :MoveUp 10
Shift Mod4 j :MoveDown 10

Shift Mod1 Mod4 h :MoveLeft 50
Shift Mod1 Mod4 l :MoveRight 50
Shift Mod1 Mod4 k :MoveUp 50
Shift Mod1 Mod4 j :MoveDown 50

<%
def reorg_done
  '{KeyMode default} ' + notify_done('reorg')
end
%>

Mod4 r :MacroCmd {KeyMode reorg} {<%= notify_persistent 'fluxbox reorg', 'reorg' %>}
reorg: q :MacroCmd <%= reorg_done %>

reorg: slash :MacroCmd {NextWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: Mod4 slash :MacroCmd {NextWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: h :MacroCmd {FocusLeft} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: l :MacroCmd {FocusRight} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: k :MacroCmd {FocusUp} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: j :MacroCmd {FocusDown} {<%= focus_active %>} {Delay {Raise} 10000}

reorg: Left :MacroCmd {MoveLeft 10} {<%= focus_active %>}
reorg: Right :MacroCmd {MoveRight 10} {<%= focus_active %>}
reorg: Up :MacroCmd {MoveUp 10} {<%= focus_active %>}
reorg: Down :MacroCmd {MoveDown 10} {<%= focus_active %>}

reorg: Shift Left :MacroCmd {MoveLeft 50} {<%= focus_active %>}
reorg: Shift Right :MacroCmd {MoveRight 50} {<%= focus_active %>}
reorg: Shift Up :MacroCmd {MoveUp 50} {<%= focus_active %>}
reorg: Shift Down :MacroCmd {MoveDown 50} {<%= focus_active %>}

reorg: Control Left :ResizeHorizontal -2%
reorg: Control Right :ResizeHorizontal 2%
reorg: Control Up :ResizeVertical -2%
reorg: Control Down :ResizeVertical 2%

reorg: Control Shift Left :ResizeHorizontal -10%
reorg: Control Shift Right :ResizeHorizontal 10%
reorg: Control Shift Up :ResizeVertical -10%
reorg: Control Shift Down :ResizeVertical 10%

reorg: 0 :MacroCmd {ResizeTo 96% 97%} {MoveTo 0 0 TopLeft} <%= reorg_done %>
reorg: 1 :MacroCmd {ResizeTo 48% 97%} {MoveTo 0 0 TopLeft} <%= reorg_done %>
reorg: 2 :MacroCmd {ResizeTo 48% 97%} {MoveTo 48% 0 TopLeft} <%= reorg_done %>
reorg: Shift 2 :MacroCmd {ResizeTo 48% 97%} {MoveTo 0 0 TopLeft} {NextWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {Delay {Exec focus-active-window --sync} 11000} {Delay {ResizeTo 48% 97%} 12000} {Delay {MoveTo 48% 0 TopLeft} 13000} <%= reorg_done %>
reorg: Shift semicolon :MacroCmd {ResizeTo 48% 48%} {MoveTo * 0 TopLeft} {NextWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {Delay {Exec focus-active-window --sync} 11000} {Delay {ResizeTo 48% 48%} 12000} {Delay {MoveTo * 48% TopLeft} 13000} <%= reorg_done %>

reorg: space :Raise
reorg: Mod4 l :If {Matches (Layer=Normal)} {MacroCmd {SetLayer Top} {<%= notify_transient 'set to top layer', 'layer' %>}} {MacroCmd {SetLayer Normal} {<%= notify_transient 'set to normal layer', 'layer'  %>}}

# go to a specific tab in the current window
# Mod4 1 :Tab 1
# Mod4 2 :Tab 2
# Mod4 3 :Tab 3
# Mod4 4 :Tab 4
# Mod4 5 :Tab 5
# Mod4 6 :Tab 6
# Mod4 7 :Tab 7
# Mod4 8 :Tab 8
# Mod4 9 :Tab 9

# opening terminals
Mod4 t :Exec xterm-window
Shift Mod4 t :Exec top-term htop
Shift Mod4 i :Exec top-term sudo nethogs `gw-dev`
Control Mod4 i :Exec top-term sudo iotop
Control Shift Mod4 i :Exec top-term sudo iftop -i `gw-dev`

# opening programs
Control Mod4 b :Exec brave-browser --disable-features=SendMouseLeaveEvents
#Control Mod4 c :Exec google-chrome-stable --disable-features=SendMouseLeaveEvents
Control Mod4 c :Exec fluxbox-focus-or-launch -c Google-chrome google-chrome-stable --disable-features=SendMouseLeaveEvents
Mod4 p :Exec fluxbox-focus-or-launch -c Pavucontrol pavucontrol

# Control Mod4 s :Exec flameshot gui
# Control Shift Mod4 s :Exec flameshot launcher
# Control Mod1 Mod4 s :Exec flameshot full
Control Mod4 s :Exec ksnip -r
Control Mod4 w :Exec ksnip -a
Control Shift Mod4 s :Exec ksnip
Control Mod1 Mod4 s :Exec ksnip -m

Mod4 u :Exec fluxbox-focus-or-launch -c Blueman-manager blueman-manager

Control Mod1 Mod4 b :Exec blank-all-screens
Control Mod1 Mod4 l :Exec xset dpms force standby
Shift Control Mod1 Mod4 l :Exec xflock4

# open a dialog to run programs
Control Mod4 space :Exec fbrun

# quick jumping to commonly open windows
# xdotool can't filter by head on multi-head sessions
# Mod4 x :Exec wmctrl -s 0; xdotool search --onlyvisible --desktop 0 --class gnome-terminal windowactivate; focus-active-window
# Heads start from 1 but workspaces from 0?!
Mod4 x :MacroCmd {NextWindow (Name=gnome-terminal-server) (Head=1) (workspace=0)} {<%= focus_active %>}

#Mod4 b :Exec wmctrl -s 1; xdotool search --desktop 1 --class brave-browser windowactivate
Mod4 b :MacroCmd {NextWindow (Name=brave-browser|google-chrome|chromium) (Head=1)} {<%= focus_active %>}
Shift Mod4 b :MacroCmd {NextWindow (Name=brave-browser|google-chrome|chromium) (Title!=.*WhatsApp.*) (Head=2)} {<%= focus_active %>}

Mod4 c :MacroCmd {NextWindow (Name=brave-browser|google-chrome|chromium) (Title!=.*WhatsApp.*) (Head=2)} {Delay {Exec focus-active-window && sleep 0.1 && xdotool key ctrl+1} 100}

#Mod4 e :Exec wmctrl -a emacs
Mod4 e :MacroCmd {NextWindow (Name=emacs)} {<%= focus_active %>}

Mod4 d :Exec fluxbox-focus-or-launch Discord discord

Mod4 g :Exec fluxbox-focus-or-launch Telegram ~/software/telegram/Telegram
Shift Mod4 g :MacroCmd {NextWindow (Title=Meet .*)} {<%= focus_active %>}

Mod4 s :Exec fluxbox-focus-or-launch Slack slack
Mod4 w :MacroCmd {NextWindow (Title=.*WhatsApp.*)} {<%= focus_active %>}
Mod4 z :Exec fluxbox-focus-or-launch Zulip zulip

#Shift Mod4 z :Exec fluxbox-focus-or-launch Zoom 'zoom --disable-gpu-sandbox'
Shift Mod4 z :MacroCmd {NextWindow (Title=Zoom Meeting.*)} {<%= focus_active %>}

# volume settings
Mod4 bracketright :MacroCmd {Exec amixer sset Master,0 2%+} {Delay {Exec amixer sset Master,0 unmute} 10000}
Mod4 bracketleft :Exec amixer sset Master,0 2%-
Mod4 0 :Exec amixer sset Master,0 toggle

# exit fluxbox
Control Mod1 Mod4 Shift e :Exit

# change to previous/next workspace
Mod4 comma :LeftWorkspace
Mod4 period :RightWorkspace

# send the current window to previous/next workspace
# Mod1 Mod4 comma :SendToLeftWorkspace
# Mod1 Mod4 period :SendToRightWorkspace

# send the current window and follow it to previous/next workspace
Mod1 Mod4 comma :If {Matches (Stuck=no)} {MacroCmd {Raise} {TakeToPrevWorkspace}} {MacroCmd {Stick} {Raise} {TakeToPrevWorkspace}}
Mod1 Mod4 period :If {Matches (Stuck=no)} {MacroCmd {Raise} {TakeToNextWorkspace}} {MacroCmd {Stick} {Raise} {TakeToNextWorkspace}}

# change to a specific workspace
Mod4 1 :Workspace 1
Mod4 2 :Workspace 2
Mod4 3 :Workspace 3
Mod4 4 :Workspace 4
Mod4 5 :Workspace 5
Mod4 6 :Workspace 6
Mod4 7 :Workspace 7
Mod4 8 :Workspace 8
Mod4 9 :Workspace 9
#Mod4 10 :Workspace 10
#Mod4 11 :Workspace 11
#Mod4 12 :Workspace 12

# send the current window to a specific workspace
#Mod4 F1 :SendToWorkspace 1
#Mod4 F2 :SendToWorkspace 2
#Mod4 F3 :SendToWorkspace 3
#Mod4 F4 :SendToWorkspace 4
#Mod4 F5 :SendToWorkspace 5
#Mod4 F6 :SendToWorkspace 6
#Mod4 F7 :SendToWorkspace 7
#Mod4 F8 :SendToWorkspace 8
#Mod4 F9 :SendToWorkspace 9
#Mod4 F10 :SendToWorkspace 10
#Mod4 F11 :SendToWorkspace 11
#Mod4 F12 :SendToWorkspace 12

# Send the current window and change to a specific workspace.
# If it's sticky, remove stickiness first.
Mod1 Mod4 1 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 1}
Mod1 Mod4 2 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 2}
Mod1 Mod4 3 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 3}
Mod1 Mod4 4 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 4}
Mod1 Mod4 5 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 5}
Mod1 Mod4 6 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 6}
Mod1 Mod4 7 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 7}
Mod1 Mod4 8 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 8}
Mod1 Mod4 9 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 9}

<%
def monitors_connected
  %x(xrandr | grep -c ' connected ').chomp
end
%>

# Number of monitors connected: <%= monitors_connected %>
<% if monitors_connected.to_i > 1 %>
# Change to previous/next head.
# Make sure synergys isn't running otherwise it will grab these keys!
Shift Mod4 comma :MacroCmd {NextWindow (workspace=[current]) (FocusHidden=no) (Head=1)} {<%= focus_active %>}
# xdotool mousemove 1200 500}

Shift Mod4 period :MacroCmd {NextWindow (workspace=[current]) (FocusHidden=no) (Head=2)} {<%= focus_active %>}
# xdotool mousemove 3200 400}
<% end %>
