<%
def next_unhidden(s, focus: true, prev: false, native: false)
  cmd = prev ? "PrevWindow" : "NextWindow"
  cmd_args = "#{cmd} #{s} (FocusHidden=no) (Minimized=no)"
  if focus
    if native
      # This one is needed for cycling between arbitrary windows,
      # otherwise it doesn't preserve a stack of most recently
      # focused windows.
      ":MacroCmd {%s} {#{cmd_args}}" % focus_active
    else
      ":Exec fluxbox-focus-window '#{cmd_args}'"
    end
  else
    ":#{cmd_args}"
  end
end

def focus_active(delay=300, sync=false)
  "Delay {Exec focus-active-window%s} #{delay * 1000}" % [
    sync ? ' --sync' : ''
  ]
end

def mousemove(x, y)
  "Exec mousemove #{x} #{y}"
end

def id_file(mode)
  "~/tmp/.fluxbox-#{mode}-id"
end

def notify(msg, timeout=3000, mode=nil, body='')
  s = %<Exec notify-send -t #{timeout} "#{msg}" "#{body}">
  s += " -p >#{id_file mode}" if mode
  return s
end

def notify_transient(msg, mode)
  notify(msg, 3000, mode)
end

def notify_persistent(msg, mode, body='')
  notify(msg, 999999, mode, body)
end

def notify_replace(msg, mode, timeout=3000)
  %<{Exec notify-send -t #{timeout} -r $(cat #{id_file(mode)}) '#{msg}'}>
end

def notify_done(mode)
  notify_replace "fluxbox #{mode} done", mode
end

def keymode(mode, body='')
  n = notify_persistent("fluxbox #{mode} mode", mode, body)
  "{KeyMode #{mode}} {#{n}}"
end

def keymode_done(mode)
  '{KeyMode default} ' + notify_done(mode)
end

def reconfigure
  %<Exec fluxbox-reconfigure && notify-send -t 3000 'Reloaded fluxbox config'>
end

def layout
  %<Exec ly --debug && notify-send -t 3000 'Applied auto-layout'>
end

def delay(cmd, ms)
  %<Delay {#{cmd}} #{ms * 1000}>
end

def monitors_connected
  %x('monitors-connected').chomp
end

%>

Control Mod1 Mod4 r :MacroCmd {<%= reconfigure %>}

# For some reason this doesn't always work:
Shift Control Mod4 r :MacroCmd {Restart} {<%= notify 'Restarted fluxbox' %>}
# so offer an alternative:
Control Mod1 Mod4 9 :MacroCmd {Restart} {<%= notify 'Restarted fluxbox' %>}

Control Mod1 Mod4 y :<%= layout %>
# {<%= delay('Restart', 500) %>} {<%= delay(notify('Restarted fluxbox'), 500) %>}

# Click on the desktop to get menus.  Make sure xfdesktop isn't running
# as it will intercept the mouse clicks.
# https://unix.stackexchange.com/questions/233423/fluxbox-toggle-rootmenu-using-mouse1#234578
OnDesktop Mouse1 :If {Matches (Name!=)} {RootMenu} {HideMenus}
OnDesktop Mouse2 :If {Matches (Name!=)} {WorkspaceMenu} {HideMenus}
OnDesktop Mouse3 :If {Matches (Name!=)} {CustomMenu ~/.fluxbox/fluxboxmenu} {HideMenus}
Control Mod1 Mouse4 :LeftWorkspace
Control Mod1 Mouse5 :RightWorkspace

Shift Mod1 Mouse4 :MacroCmd {Raise} {TakeToPrevWorkspace}
Shift Mod1 Mouse5 :MacroCmd {Raise} {TakeToNextWorkspace}

Mod4 Return :RootMenu
Control Mod4 Return :WorkspaceMenu
Shift Mod4 Return :WindowMenu
Mod1 Mod4 Return :ClientMenu
Mod4 j :CustomMenu ~/.fluxbox/jumpmenu
Mod4 o :CustomMenu ~/.fluxbox/org-menu

# scroll on the desktop to change workspaces
OnDesktop Mouse4 :LeftWorkspace
OnDesktop Mouse5 :RightWorkspace

# scroll on the toolbar to change current window
OnToolbar Mouse4 :PrevWindow {static groups} (iconhidden=no)
OnToolbar Mouse5 :NextWindow {static groups} (iconhidden=no)

# alt + left/right click to move/resize a window
OnWindow Mod1 Mouse1 :MacroCmd {Raise} {Focus} {StartMoving}
OnWindowBorder Move1 :StartMoving

OnWindow Mod1 Mouse3 :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}
OnLeftGrip Move1 :StartResizing bottomleft
OnRightGrip Move1 :StartResizing bottomright

# raise/lower with mouse
OnTitlebar Mouse4 :Raise
OnTitlebar Mouse5 :Lower
OnWindow Mod1 Mouse4 :Raise
OnWindow Mod1 Mouse5 :Lower

# control-click a window's titlebar and drag to attach windows
OnTitlebar Control Mouse1 :StartTabbing

# double click on the titlebar to shade
OnTitlebar Double Mouse1 :Shade

# left click on the titlebar to move the window
OnTitlebar Mouse1 :MacroCmd {Raise} {Focus} {ActivateTab}
OnTitlebar Move1  :StartMoving

# middle click on the titlebar to lower
OnTitlebar Mouse2 :Lower

# right click on the titlebar for a menu of options
OnTitlebar Mouse3 :WindowMenu

# cycle windows on current display and workspace
Mod4 slash <%= next_unhidden "(workspace=[current]) (Head=[mouse])", native: true %>

# add Shift to cycle in opposite direction:
Shift Mod4 slash <%= next_unhidden "(workspace=[current]) (Head=[mouse])", native: true, prev: true %>

# add Control to include minimized windows
# Not currently working?!
Control Mod4 slash :MacroCmd {NextWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {<%= focus_active %>}

# cycle windows on any display head, current workspace
# probably not useful since makes more sense to switch display head manually first
# Shift Mod4 slash :MacroCmd {NextWindow (workspace=[current]) (FocusHidden=no)} {<%= focus_active %>}

# FIXME: figure out how to cycle without raising the focused window.
# According to fluxbox-keys(5) man page, this should only raise windows
# temporarily due to the binding using a modifier key, but it always
# leaves the window raised.
#Control Mod4 slash :NextWindow (workspace=[current])
#Control Shift Mod4 slash :PrevWindow (workspace=[current])

# So instead, use these bindings to cycle through tabs in the current window.
#Control Mod4 slash :NextTab (workspace=[current])
#Control Shift Mod4 slash :PrevTab

# FIXME: Focus* are missing support for client patterns like the other commands
Mod4 Left :MacroCmd {FocusLeft} {<%= focus_active %>} {Delay {Raise} 10000}
Mod4 Right :MacroCmd {FocusRight} {<%= focus_active %>} {Delay {Raise} 10000}
Mod4 Up :MacroCmd {FocusUp} {<%= focus_active %>} {Delay {Raise} 10000}
Mod4 Down :MacroCmd {FocusDown} {<%= focus_active %>} {Delay {Raise} 10000}

Control Mod4 Left :MacroCmd {FocusLeft}
Control Mod4 Right :MacroCmd {FocusRight}
Control Mod4 Up :MacroCmd {FocusUp}
Control Mod4 Down :MacroCmd {FocusDown}

<% if false && %w(aegean).include?(ENV['localhost_nickname']) %>
# aegean only:
Mod4 h :MacroCmd {FocusLeft} {<%= focus_active %>}
Mod4 l :MacroCmd {FocusRight} {<%= focus_active %>}
Mod4 k :MacroCmd {FocusUp} {<%= focus_active %>}
Mod4 j :MacroCmd {FocusDown} {<%= focus_active %>}
<% end %>

# current window commands
Mod4 space :Raise
Mod4 l :MacroCmd {Lower} {<%= focus_active %>}
Mod1 Mod4 l :Lower
Mod4 i :Minimize
# Deminimize
Control Mod4 i :MacroCmd {NextWindow (workspace=[current]) (Head=[mouse]) (Minimized=yes) (FocusHidden=no)} {<%= focus_active %>}

Shift Mod4 m :MaximizeVertical
Control Mod4 m :MaximizeHorizontal
Shift Control Mod4 m :Maximize

Mod4 m :MacroCmd <%= keymode 'mail',
'm: personal mutt (M avoids reuse)
t: Toucan mutt (T avoids reuse)
g: personal gmail
G: Toucan gmail
s: Toucan superhuman
--------------------------------------------------------
c p: gtd-timer countdown for personal notmuch
c t: gtd-timer countdown for Toucan notmuch
--------------------------------------------------------
l p: show personal-mail-sync log
l t: show Toucan-mail-sync log
--------------------------------------------------------
, sync-personal-mail-now
. sync-Toucan-mail-now
< sync-personal-mail
> sync-Toucan-mail'
.gsub("\n", '\n') %>
mail: m       :MacroCmd {Exec fluxbox-mutt-term m } <%= keymode_done 'mail' %>
mail: Shift m :MacroCmd {Exec         mutt-term m } <%= keymode_done 'mail' %>
mail: Mod4 m  :MacroCmd {Exec fluxbox-mutt-term m } <%= keymode_done 'mail' %>
mail: Shift mod4 m :MacroCmd {Exec    mutt-term m } <%= keymode_done 'mail' %>
mail: p       :MacroCmd {Exec fluxbox-mutt-term m } <%= keymode_done 'mail' %>
mail: Shift p :MacroCmd {Exec         mutt-term m } <%= keymode_done 'mail' %>
mail: t       :MacroCmd {Exec fluxbox-mutt-term mt} <%= keymode_done 'mail' %>
mail: Shift t :MacroCmd {Exec         mutt-term mt} <%= keymode_done 'mail' %>
mail: g       :MacroCmd {Exec chrome-session-tabs 'mail.google.com/mail/u/0'} <%= keymode_done 'mail' %>
mail: Shift g :MacroCmd {Exec chrome-session-tabs 'mail.google.com/mail/u/1'} <%= keymode_done 'mail' %>
mail: s       :MacroCmd {Exec chrome-session-tabs 'mail.superhuman.com'}      <%= keymode_done 'mail' %>

mail: c p     :MacroCmd {Exec urxvt -fn smoothansi -geometry 90x15-0-0 -e sh -c "gtd-timer -c 'nmp count tag:inbox'; sleep 60"} <%= keymode_done 'mail' %>
mail: c t     :MacroCmd {Exec urxvt -fn smoothansi -geometry 90x15-0-0 -e sh -c "gtd-timer -c 'nmt count tag:inbox'; sleep 60"} <%= keymode_done 'mail' %>

mail: l p     :MacroCmd {Exec top-term --title 'personal mail sync daemon' ujlu personal-mail-sync} <%= keymode_done 'mail' %>
mail: l t     :MacroCmd {Exec top-term --title 'Toucan mail sync daemon' ujlu Toucan-mail-sync} <%= keymode_done 'mail' %>

mail: comma   :MacroCmd {Exec sync-personal-mail-now} <%= keymode_done 'mail' %>
mail: period  :MacroCmd {Exec sync-Toucan-mail-now}   <%= keymode_done 'mail' %>

mail: Shift comma  :MacroCmd {Exec top-term --title 'personal mail sync' sync-personal-mail --wait-for-key} <%= keymode_done 'mail' %>
mail: Shift period :MacroCmd {Exec top-term --title 'Toucan mail sync'   sync-Toucan-mail --wait-for-key} <%= keymode_done 'mail' %>

mail: q :MacroCmd <%= keymode_done 'mail' %>

# Added into reorg mode instead
# Shift Mod4 m :MacroCmd <%= keymode 'fluxbox maximize', 'maximize' %>
# maximize: v :MacroCmd {MaximizeVertical} <%= keymode_done 'maximize' %>
# maximize: h :MacroCmd {MaximizeHorizontal} <%= keymode_done 'maximize' %>
# maximize: b :MacroCmd {Maximize} <%= keymode_done 'maximize' %>
# maximize: q :MacroCmd <%= keymode_done 'maximize' %>

Shift Mod4 s :StickWindow
Mod4 q :Close
Control Mod4 q :Kill

Mod4 equal :Exec warp-notification clear
Control Mod4 equal :Exec warp-notification

Shift Mod4 Left  :MacroCmd {MoveLeft  10} {<%= focus_active %>}
Shift Mod4 Right :MacroCmd {MoveRight 10} {<%= focus_active %>}
Shift Mod4 Up    :MacroCmd {MoveUp    10} {<%= focus_active %>}
Shift Mod4 Down  :MacroCmd {MoveDown  10} {<%= focus_active %>}

Shift Mod1 Mod4 Left  :MacroCmd {MoveLeft  50} {<%= focus_active %>}
Shift Mod1 Mod4 Right :MacroCmd {MoveRight 50} {<%= focus_active %>}
Shift Mod1 Mod4 Up    :MacroCmd {MoveUp    50} {<%= focus_active %>}
Shift Mod1 Mod4 Down  :MacroCmd {MoveDown  50} {<%= focus_active %>}

Shift Mod4 h :MacroCmd {MoveLeft  10} {<%= focus_active %>}
Shift Mod4 l :MacroCmd {MoveRight 10} {<%= focus_active %>}
Shift Mod4 k :MacroCmd {MoveUp    10} {<%= focus_active %>}
Shift Mod4 j :MacroCmd {MoveDown  10} {<%= focus_active %>}

Shift Mod1 Mod4 h :MacroCmd {MoveLeft  50} {<%= focus_active %>}
Shift Mod1 Mod4 l :MacroCmd {MoveRight 50} {<%= focus_active %>}
Shift Mod1 Mod4 k :MacroCmd {MoveUp    50} {<%= focus_active %>}
Shift Mod1 Mod4 j :MacroCmd {MoveDown  50} {<%= focus_active %>}

Control Mod4 p :MacroCmd <%= keymode 'passthru' %>
passthru: q :MacroCmd <%= keymode_done 'passthru' %>

Mod4 r :MacroCmd <%= keymode 'reorg' %>
reorg: q :MacroCmd <%= keymode_done 'reorg' %>

reorg: slash :MacroCmd {NextWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: Mod4 slash :MacroCmd {NextWindow (workspace=[current]) (Head=[mouse]) (FocusHidden=no)} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: h :MacroCmd {FocusLeft} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: l :MacroCmd {FocusRight} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: k :MacroCmd {FocusUp} {<%= focus_active %>} {Delay {Raise} 10000}
reorg: j :MacroCmd {FocusDown} {<%= focus_active %>} {Delay {Raise} 10000}

reorg: Left :MacroCmd {MoveLeft 10} {<%= focus_active %>}
reorg: Right :MacroCmd {MoveRight 10} {<%= focus_active %>}
reorg: Up :MacroCmd {MoveUp 10} {<%= focus_active %>}
reorg: Down :MacroCmd {MoveDown 10} {<%= focus_active %>}

reorg: Shift Left :MacroCmd {MoveLeft 50} {<%= focus_active %>}
reorg: Shift Right :MacroCmd {MoveRight 50} {<%= focus_active %>}
reorg: Shift Up :MacroCmd {MoveUp 50} {<%= focus_active %>}
reorg: Shift Down :MacroCmd {MoveDown 50} {<%= focus_active %>}

reorg: Control Left :ResizeHorizontal -2%
reorg: Control Right :ResizeHorizontal 2%
reorg: Control Up :ResizeVertical -2%
reorg: Control Down :ResizeVertical 2%

reorg: Control Shift Left :ResizeHorizontal -10%
reorg: Control Shift Right :ResizeHorizontal 10%
reorg: Control Shift Up :ResizeVertical -10%
reorg: Control Shift Down :ResizeVertical 10%

reorg: m :Maximize
reorg: Shift m :MaximizeVertical
reorg: Control m :MaximizeHorizontal

#reorg: Shift d :MacroCmd {Exec get-layout --debug >&~/.log/get-layout.log} <%= keymode_done 'reorg' %>
#reorg: Shift i :MacroCmd {Exec strace /usr/bin/inxi --tty -c 0 -Gxx --output json --output-file print >&~/.log/inxi.log} <%= keymode_done 'reorg' %>
#reorg: Shift i :MacroCmd {Exec which inxi >&~/.log/inxi.path} <%= keymode_done 'reorg' %>
reorg: Shift 0 :MacroCmd {Exec ly --debug -s active} <%= keymode_done 'reorg' %>
reorg: Control 0 :MacroCmd {Exec ly --debug -s full} <%= keymode_done 'reorg' %>
reorg: 0 :MacroCmd {Exec ly --debug -s single} <%= keymode_done 'reorg' %>
reorg: 1 :MacroCmd {Exec ly --debug -s left} <%= keymode_done 'reorg' %>
reorg: 2 :MacroCmd {Exec ly --debug -s right} <%= keymode_done 'reorg' %>
reorg: 3 :MacroCmd {Exec ly --debug -s top} <%= keymode_done 'reorg' %>
reorg: 4 :MacroCmd {Exec ly --debug -s bottom} <%= keymode_done 'reorg' %>
reorg: 5 :MacroCmd {Exec ly --debug -s top-left} <%= keymode_done 'reorg' %>
reorg: 6 :MacroCmd {Exec ly --debug -s top-right} <%= keymode_done 'reorg' %>
reorg: 7 :MacroCmd {Exec ly --debug -s bottom-left} <%= keymode_done 'reorg' %>
reorg: 8 :MacroCmd {Exec ly --debug -s bottom-right} <%= keymode_done 'reorg' %>
reorg: Shift 2 :MacroCmd {Exec ly --debug -s 2cols} <%= keymode_done 'reorg' %>
reorg: Shift 5 :ResizeTo 1280 720 <%= keymode_done 'reorg' %>
reorg: Shift semicolon :MacroCmd {Exec ly --debug -s 2rows} <%= keymode_done 'reorg' %>

reorg: space :Raise
reorg: Mod4 l :If {Matches (Layer=Normal)} {MacroCmd {SetLayer Top} {<%= notify_transient 'set to top layer', 'layer' %>}} {MacroCmd {SetLayer Normal} {<%= notify_transient 'set to normal layer', 'layer'  %>}}

# go to a specific tab in the current window
# Mod4 1 :Tab 1
# Mod4 2 :Tab 2
# Mod4 3 :Tab 3
# Mod4 4 :Tab 4
# Mod4 5 :Tab 5
# Mod4 6 :Tab 6
# Mod4 7 :Tab 7
# Mod4 8 :Tab 8
# Mod4 9 :Tab 9

# opening terminals
Mod4 t :MacroCmd <%= keymode 'terminals', 't: terminal\nb: btop\nh: htop\nn: nethogs\ni: iotop\ng: iftop gateway\np: powertop' %>
terminals: q :MacroCmd <%= keymode_done 'terminals' %>
terminals: t :MacroCmd {Exec xterm-window} <%= keymode_done 'terminals' %>
terminals: Mod4 t :MacroCmd {Exec xterm-window} <%= keymode_done 'terminals' %>
terminals: b :MacroCmd {Exec fluxbox-focus-or-launch --toggle btop top-term btop} <%= keymode_done 'terminals' %>
Mod4 grave :Exec fluxbox-focus-or-launch --toggle btop top-term btop
Mod4 Shift grave :Exec fluxbox-focus-or-launch --toggle ccmonitor top-term ccmonitor
terminals: h :MacroCmd {Exec top-term htop} <%= keymode_done 'terminals' %>
terminals: n :MacroCmd {Exec top-term sudo nethogs `gw-dev`} <%= keymode_done 'terminals' %>
terminals: i :MacroCmd {Exec top-term sudo iotop} <%= keymode_done 'terminals' %>
terminals: g :MacroCmd {Exec top-term sudo iftop -i `gw-dev`} <%= keymode_done 'terminals' %>
terminals: p :MacroCmd {Exec top-term sudo powertop} <%= keymode_done 'terminals' %>

# opening programs
Control Mod4 b :Exec brave-browser
#Control Mod4 c :Exec google-chrome-stable
Mod4 f :Exec fluxbox-focus-or-launch -c firefox firefox
Mod4 p :Exec fluxbox-focus-or-launch -c '[Pp]avucontrol' pavucontrol
Mod4 Shift p :Exec fluxbox-focus-or-launch -c 'easyeffects' easyeffects

# Control Mod4 s :Exec flameshot gui
# Control Shift Mod4 s :Exec flameshot launcher
# Control Mod1 Mod4 s :Exec flameshot full
Control Mod4 s :Exec ksnip -r
Control Mod4 w :Exec ksnip -a
Control Shift Mod4 s :Exec ksnip
Control Mod1 Mod4 s :Exec ksnip -m

Mod4 u :Exec fluxbox-focus-or-launch -c Blueman-manager blueman-manager

Control Mod1 Mod4 b :Exec blank-all-screens
Control Mod1 Mod4 d :Exec xfce4-display-settings
#Control Mod1 Mod4 l :Exec xset dpms force standby
Control Mod1 Mod4 l :Exec xscreensaver-command -activate
# This calls xscreensaver-command -lock if xscreensaver is XFCE4's chosen locker
Shift Control Mod1 Mod4 l :Exec xflock4

# open a dialog to run programs
Control Mod4 space :Exec fbrun

Mod4 semicolon :Exec warpd --hint
Shift Mod4 semicolon :Exec warpd --hint2
Control Mod4 semicolon :Exec warpd --grid
Mod4 minus :Exec warpd --normal

Mod4 7 :MacroCmd {Exec xdotool keyup Super_R} {Exec warpd --click 1}
Mod4 8 :MacroCmd {Exec xdotool keyup Super_R} {Exec warpd --click 2}
Mod4 9 :MacroCmd {Exec xdotool keyup Super_R} {Exec warpd --click 3}

# quick jumping to commonly open windows
# xdotool can't filter by head on multi-head sessions
# Mod4 x :Exec wmctrl -s 0; xdotool search --onlyvisible --desktop 0 --class gnome-terminal windowactivate; focus-active-window
# Heads start from 1 but workspaces from 0?!

# N.B. used to have (Name=gnome-terminal-server) here too as an additional
# pattern, but it seems these days the instance name is org.gnome.Terminal.
# Not clear when that changed or why.
#Mod4 x :MacroCmd {Exec wmctrl -x -a xfce4-terminal} {<%= focus_active %>}
Mod4 x <%= next_unhidden "(Role=(xfce4|gnome)-terminal-.*) (Head=1) (workspace=0)" %>
Control Mod4 x :Exec rmx-window

Mod4 a :Exec chrome-session-fzf 't3.chat | poe.com | chat.deepseek.com | claude.ai | chatgpt.com | gemini.google.com'

Shift Mod4 a :Exec fluxbox-focus-or-launch -c anytype anytype
Control Mod4 a :Exec chrome-session-tabs 'open.spotify.com'
#Mod4 b :Exec wmctrl -s 1; xdotool search --desktop 1 --class brave-browser windowactivate
Mod4 b :MacroCmd {NextWindow (Name=brave-browser|google-chrome|chromium) (Head=1) (Minimized=no)} {<%= focus_active %>}
<% if monitors_connected.to_i > 1 %>
Shift Mod4 b :MacroCmd {NextWindow (Name=brave-browser|google-chrome|chromium) (Title!=.*WhatsApp.*) (Head=2) (Minimized=no)} {<%= focus_active %>}

<% end %>
Mod4 Tab :Exec chrome-session-fzf

# Cleanest but can't find both Cursor and Code:
#Mod4 c :MacroCmd {Exec wmctrl -x -a 'Code'} {<%= focus_active %>}

# Can't handle iconified windows:
#Mod4 c :Exec fluxbox-focus-or-launch -c 'Cursor|Code' cursor

# Hacky but best results:
Mod4 c <%= next_unhidden "(Class=Cursor|Code)" %>

Shift Mod4 c :Exec chrome-session-tabs 'calendar.google.com/calendar/u/0'
Control Mod4 c :Exec chrome-session-tabs 'calendar.google.com/calendar/u/1'
Shift Mod4 r :Exec chrome-session-tabs 'app.reclaim.ai'

# useful as a calculator
Control Mod1 Mod4 n :Exec top-term node

#Mod4 e :MacroCmd {Exec wmctrl -x -a emacs} {<%= focus_active %>}
Mod4 e  <%= next_unhidden "(Class=Emacs)" %>
Shift Mod4 e :Exec chrome-session-fzf 'https://linear.app/ '

Mod4 apostrophe :MacroCmd {Exec wmctrl -x -a beeper} {<%= focus_active %>}
#Mod4 apostrophe <%= next_unhidden "(Class=Beeper)" %>
Control Mod4 d :Exec fluxbox-focus-or-launch -c discord discord
Control Mod4 f :Exec chrome-session-fzf messenger.com

Mod4 g :Exec fluxbox-focus-or-launch -c TelegramDesktop ~/software/telegram/Telegram
Shift Mod4 g :Exec chrome-session-tabs https://meet.google.com/
Control Mod4 g :Exec chrome-session-tabs https://app.gather.town/

Mod4 h :Exec chrome-session-fzf 'https://github.com/ '

Control Mod4 2 :Exec switch-emacs-eval '(as-find-personal-todo)'
Control Mod4 5 :Exec switch-emacs-eval '(as-find-Toucan-todo)'
Control Mod4 7 :Exec switch-emacs-eval ~/lib/emacs/shortcuts/org-agenda-weekly-review.el
Mod4 k :Exec switch-emacs-eval '(org-capture)'
Control Mod4 k :Exec slack-capture-todo
Mod4 d :Exec switch-emacs-eval ~/lib/emacs/shortcuts/org-agenda-today.el
Mod4 v :Exec switch-emacs-eval ~/lib/emacs/shortcuts/org-agenda-daily-review.el
Mod4 n :Exec switch-emacs-eval '(as-find-personal-note)'
Mod1 Mod4 n :Exec fluxbox-focus-or-launch -c notion-app-enhanced ~/software/web/Notion-Enhanced.AppImage
# Mod4 m m :Exec chrome-session-tabs 'mail.google.com/mail/u/0'
# Mod4 m t :Exec chrome-session-tabs 'mail.google.com/mail/u/1'
Shift Mod4 n :Exec chrome-session-fzf 'https://www.notion.so/ '
Mod4 s :Exec fluxbox-focus-or-launch -c Slack slack
Control Mod4 y :Exec chrome-session-tabs 'syncthing.*127.0.0.1:8384|localhost:8384' || syncthing --browser-only
Shift Mod4 w :Exec fluxbox-focus-or-launch -c Windsurf windsurf
Mod4 w :Exec chrome-session-tabs WhatsApp
Mod4 y :Exec chrome-session-fzf youtube.com
Mod4 z :Exec fluxbox-focus-or-launch -c Zulip zulip

#Shift Mod4 z :Exec fluxbox-focus-or-launch Zoom 'zoom --disable-gpu-sandbox'
Shift Mod4 z :MacroCmd {NextWindow (Title=Zoom Meeting|Personal Meeting|://.*\.zoom\.us/.*)} {<%= focus_active %>}
Control Mod4 z :Exec chrome-session-fzf 'Zoom\ meeting | Personal\ Meeting | ://app.zoom.us/'

# volume settings
# Mod4 bracketright :MacroCmd {Exec amixer sset Master,0 2%+} {Delay {Exec amixer sset Master,0 unmute} 10000}
Mod4 bracketright :MacroCmd {Exec wpvol set 2%+} {Delay {Exec wpvol unmute} 10000}
Mod4 bracketleft :Exec wpvol set 2%-
Mod4 0 :Exec wpvol toggle

# exit fluxbox
Control Mod1 Mod4 Shift e :Exit

<% ['', 'reorg: '].each do |prefix| %>
###################################################################
# Workspace switching<%= prefix.empty? ? '' : " for KeyMode #{prefix}" %>

# change to previous/next workspace
<%= prefix %>Mod4 comma :LeftWorkspace
<%= prefix %>Mod4 period :RightWorkspace

# send the current window to previous/next workspace
# Mod1 Mod4 comma :SendToLeftWorkspace
# Mod1 Mod4 period :SendToRightWorkspace

# send the current window and follow it to previous/next workspace
<%= prefix %>Mod1 Mod4 comma :If {Matches (Stuck=no)} {MacroCmd {Raise} {TakeToPrevWorkspace}} {MacroCmd {Stick} {Raise} {TakeToPrevWorkspace}}
<%= prefix %>Mod1 Mod4 period :If {Matches (Stuck=no)} {MacroCmd {Raise} {TakeToNextWorkspace}} {MacroCmd {Stick} {Raise} {TakeToNextWorkspace}}

# change to a specific workspace
<%= prefix %>Mod4 1 :Workspace 1
<%= prefix %>Mod4 2 :Workspace 2
<%= prefix %>Mod4 3 :Workspace 3
<%= prefix %>Mod4 4 :Workspace 4
<%= prefix %>Mod4 5 :Workspace 5
<%= prefix %>Mod4 6 :Workspace 6
#<%= prefix %>Mod4 7 :Workspace 7
#<%= prefix %>Mod4 8 :Workspace 8
#<%= prefix %>Mod4 9 :Workspace 9

# send the current window to a specific workspace
#<%= prefix %>Mod4 F1 :SendToWorkspace 1
#<%= prefix %>Mod4 F2 :SendToWorkspace 2
#<%= prefix %>Mod4 F3 :SendToWorkspace 3
#<%= prefix %>Mod4 F4 :SendToWorkspace 4
#<%= prefix %>Mod4 F5 :SendToWorkspace 5
#<%= prefix %>Mod4 F6 :SendToWorkspace 6
#<%= prefix %>Mod4 F7 :SendToWorkspace 7
#<%= prefix %>Mod4 F8 :SendToWorkspace 8
#<%= prefix %>Mod4 F9 :SendToWorkspace 9

# Send the current window and change to a specific workspace.
# If it's sticky, remove stickiness first.
<%= prefix %>Mod1 Mod4 1 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 1}
<%= prefix %>Mod1 Mod4 2 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 2}
<%= prefix %>Mod1 Mod4 3 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 3}
<%= prefix %>Mod1 Mod4 4 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 4}
<%= prefix %>Mod1 Mod4 5 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 5}
<%= prefix %>Mod1 Mod4 6 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 6}
#<%= prefix %>Mod1 Mod4 7 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 7}
#<%= prefix %>Mod1 Mod4 8 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 8}
#<%= prefix %>Mod1 Mod4 9 :MacroCmd {If {Matches (Stuck=yes)} {Stick}} {Raise} {TakeToWorkspace 9}

<% end %>

# Number of monitors connected: <%= monitors_connected %>
<% if monitors_connected.to_i > 1 %>
# Change to previous/next head.
# Make sure synergys isn't running otherwise it will grab these keys!
Shift Mod4 comma :Exec screen-navigation --move left --use-xrandr-cache
Shift Mod4 period :Exec screen-navigation --move right --use-xrandr-cache
<% end %>
